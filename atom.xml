<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hanks&#39; Blog</title>
  <subtitle>coding for fun..</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hanks.pub/"/>
  <updated>2017-07-10T11:02:58.171Z</updated>
  <id>http://hanks.pub/</id>
  
  <author>
    <name>Hanks</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>探究 lua 在 Android 中的应用</title>
    <link href="http://hanks.pub/2017/04/28/lua-in-android/"/>
    <id>http://hanks.pub/2017/04/28/lua-in-android/</id>
    <published>2017-04-28T14:04:24.000Z</published>
    <updated>2017-07-10T11:02:58.171Z</updated>
    
    <content type="html"><![CDATA[<p>根据前面的文章 <a href="http://hanks.pub/2017/01/10/android-lua/">Android 与 Lua</a> 可以大概了解 Lua 。在 Android（移动设备）中，可以通过灵活加载 Lua 脚本，使应用更加灵活，轻松面对多变的需求。luajava 在 jni 层主要实现了5个方法，借助这5个方法lua几乎可以使用所有的java类了。</p>
<a id="more"></a>
<h2 id="Java-和-lua-交互"><a href="#Java-和-lua-交互" class="headerlink" title="Java 和 lua 交互"></a>Java 和 lua 交互</h2><p>关于 java 和 lua 交互的大概有两个项目。<br>一个是 <a href="https://github.com/jasonsantos/luajava" target="_blank" rel="external">luajava</a>，通过 java 的 jni 功能，java 与 c 交互，然后 c 调用 lua ，延伸出来的有 <a href="https://github.com/mkottman/AndroLua" target="_blank" rel="external">AndroLua</a>。还有在 Android 平台的 lua 编辑器 <a href="https://github.com/nirenr/androlua_pro" target="_blank" rel="external">AndroLua+</a>，用来开发 Android。</p>
<p>还有一个 <a href="http://www.luaj.org/luaj/3.0/README.html" target="_blank" rel="external">luaj</a>，纯 java 实现的 Lua 解释器，基于 Lua 5.2.x。前面介绍的 LuaSdkView 就是基于 luaj 修改的。在 lua 调用任意 java 类方面，LuaSdkView 实现了一些通用的类来创建java对象，调用方法。</p>
<p>接下来看 luaj 的具体使用。 </p>
<h3 id="java-调用-lua"><a href="#java-调用-lua" class="headerlink" title="java 调用 lua"></a>java 调用 lua</h3><p>hello.lua 文件</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> <span class="string">'----hello.lua---'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">( num1, num2 )</span></span></div><div class="line">    <span class="keyword">return</span> num1 + num2</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">return</span> <span class="string">'hanks'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Test.java 文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 加载 lua 文件</span></div><div class="line">Globals G = JsePlatform.standardGlobals();</div><div class="line">LuaValue scriptValue = G.load(<span class="string">"print 'hello, world'"</span>);</div><div class="line">scriptValue.call();<span class="comment">// 打印出 hello, world</span></div><div class="line"></div><div class="line">G.get(<span class="string">"dofile"</span>).call(LuaValue.valueOf(<span class="string">"hello.lua"</span>)); <span class="comment">// 打印出 ----hello.lua---</span></div><div class="line"></div><div class="line">LuaValue sumFuc = G.get(<span class="string">"sum"</span>);</div><div class="line">LuaValue sum = sumFuc.call(LuaValue.valueOf(<span class="number">5</span>), LuaValue.valueOf(<span class="number">3</span>));</div><div class="line">System.out.println(sum.toint()); <span class="comment">// 打印出 8</span></div><div class="line"></div><div class="line">LuaValue getNameFun = G.get(<span class="string">"getName"</span>);</div><div class="line">LuaValue name = getNameFun.call();</div><div class="line">System.out.println(name.tojstring());  <span class="comment">// 打印出 hanks</span></div></pre></td></tr></table></figure></p>
<h3 id="lua-调用-java"><a href="#lua-调用-java" class="headerlink" title="lua 调用 java"></a>lua 调用 java</h3><p>直接调用<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">local</span> <span class="keyword">Thread</span> = luajava.bindClass(<span class="string">'java.lang.Thread'</span>)</div><div class="line">print(<span class="keyword">Thread</span>) <span class="comment">// 打印 class java.lang.Thread</span></div></pre></td></tr></table></figure></p>
<p>定义 hyperbolic.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hyperbolic</span> <span class="keyword">extends</span> <span class="title">TwoArgFunction</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">hyperbolic</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> LuaValue <span class="title">call</span><span class="params">(LuaValue modname, LuaValue env)</span> </span>&#123;</div><div class="line">        LuaValue library = tableOf();</div><div class="line">        library.set(<span class="string">"sinh"</span>, <span class="keyword">new</span> sinh());</div><div class="line">        library.set(<span class="string">"cosh"</span>, <span class="keyword">new</span> cosh());</div><div class="line">        env.set(<span class="string">"hyperbolic"</span>, library);</div><div class="line">        <span class="keyword">return</span> library;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">sinh</span> <span class="keyword">extends</span> <span class="title">OneArgFunction</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> LuaValue <span class="title">call</span><span class="params">(LuaValue x)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> LuaValue.valueOf(Math.sinh(x.checkdouble()));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">cosh</span> <span class="keyword">extends</span> <span class="title">OneArgFunction</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> LuaValue <span class="title">call</span><span class="params">(LuaValue x)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> LuaValue.valueOf(Math.cosh(x.checkdouble()));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>testhyperbolic.lua 进行调用</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span> <span class="string">'hyperbolic'</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">'hyperbolic'</span>, hyperbolic)</div><div class="line"><span class="built_in">print</span>(<span class="string">'hyperbolic.sinh'</span>, hyperbolic.sinh)</div><div class="line"><span class="built_in">print</span>(<span class="string">'hyperbolic.cosh'</span>, hyperbolic.cosh)</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">'sinh(0.5)'</span>, hyperbolic.sinh(<span class="number">0.5</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">'cosh(0.5)'</span>, hyperbolic.cosh(<span class="number">0.5</span>))</div></pre></td></tr></table></figure>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Globals globals = JsePlatform.standardGlobals();</div><div class="line">globals.loadfile(<span class="string">"testhyperbolic.lua"</span>).<span class="built_in">call</span>();</div><div class="line"></div><div class="line">/* 打印</div><div class="line">hyperbolic  tab<span class="symbol">le:</span> <span class="number">61</span>e717c2</div><div class="line">hyperbolic.sinh functi<span class="symbol">on:</span> <span class="built_in">sinh</span></div><div class="line">hyperbolic.cosh functi<span class="symbol">on:</span> <span class="built_in">cosh</span></div><div class="line"><span class="built_in">sinh</span>(<span class="number">0.5</span>)   <span class="number">0.5210953</span></div><div class="line"><span class="built_in">cosh</span>(<span class="number">0.5</span>)   <span class="number">1.127626</span></div><div class="line">*/</div></pre></td></tr></table></figure>
<blockquote>
<p>文章来自： <a href="http://hanks.pub">http://hanks.pub</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据前面的文章 &lt;a href=&quot;http://hanks.pub/2017/01/10/android-lua/&quot;&gt;Android 与 Lua&lt;/a&gt; 可以大概了解 Lua 。在 Android（移动设备）中，可以通过灵活加载 Lua 脚本，使应用更加灵活，轻松面对多变的需求。luajava 在 jni 层主要实现了5个方法，借助这5个方法lua几乎可以使用所有的java类了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://hanks.pub/tags/Android/"/>
    
      <category term="Lua" scheme="http://hanks.pub/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Node 识别图片中的文字</title>
    <link href="http://hanks.pub/2017/03/26/node-image-recognition/"/>
    <id>http://hanks.pub/2017/03/26/node-image-recognition/</id>
    <published>2017-03-26T08:53:53.000Z</published>
    <updated>2017-03-27T02:05:42.394Z</updated>
    
    <content type="html"><![CDATA[<p>首先根据需求处理图片大小旋转角度，然后识别图片中的文字。<br><a href="https://github.com/zhangyuanwei/node-images" target="_blank" rel="external">node-images</a>:  Node.js 轻量级跨平台图像编解码库<br><a href="https://github.com/naptha/tesseract.js" target="_blank" rel="external">tesseract</a>: 纯 JS 的 OCR 库支持 62 种语言。<br><a id="more"></a></p>
<p>例子：</p>
<p>某网站的验证码<br><img src="http://ww1.sinaimg.cn/large/8c9b876fly1fe0bvsibibj201a00p07l.jpg" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta"></span></div><div class="line">"use strict"</div><div class="line"></div><div class="line"><span class="keyword">var</span> images = <span class="built_in">require</span>(<span class="string">'images'</span>)</div><div class="line"><span class="keyword">var</span> Tesseract = <span class="built_in">require</span>(<span class="string">'tesseract.js'</span>);</div><div class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 将图片下载到本地</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params">uri, filename, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> stream = fs.createWriteStream(filename);</div><div class="line">    request(uri).pipe(stream)</div><div class="line">        .on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            callback();</div><div class="line">        &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 识别图片</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">recognize</span>(<span class="params">filePath, callback</span>) </span>&#123;</div><div class="line">    <span class="comment">// 图片放大</span></div><div class="line">    images(filePath)</div><div class="line">        .size(<span class="number">90</span>)</div><div class="line">        .save(filePath);</div><div class="line">    <span class="comment">// 识别</span></div><div class="line">    Tesseract</div><div class="line">        .recognize(filePath, &#123;</div><div class="line">            <span class="attr">lang</span>: <span class="string">'eng'</span>, <span class="comment">// 语言选英文</span></div><div class="line">            tessedit_char_blacklist: <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></div><div class="line">                <span class="comment">//因为是数字验证码，排除字母</span></div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</div><div class="line">            callback(result.text);</div><div class="line">        &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVcode</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> url = <span class="string">'http://ww1.sinaimg.cn/large/8c9b876fly1fe0bvsibibj201a00p07l.jpg'</span>;</div><div class="line">    <span class="keyword">var</span> filename = <span class="string">'vcode.png'</span>;</div><div class="line">    <span class="comment">// 先下载下来，再识别</span></div><div class="line">    downloadFile(url, filename, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        recognize(filename, <span class="function"><span class="keyword">function</span> (<span class="params">txt</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'识别结果: '</span> + txt);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">getVcode();</div></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/8c9b876fly1fe0ccaubowj20rk02yaa6.jpg" alt="运行结果"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先根据需求处理图片大小旋转角度，然后识别图片中的文字。&lt;br&gt;&lt;a href=&quot;https://github.com/zhangyuanwei/node-images&quot;&gt;node-images&lt;/a&gt;:  Node.js 轻量级跨平台图像编解码库&lt;br&gt;&lt;a href=&quot;https://github.com/naptha/tesseract.js&quot;&gt;tesseract&lt;/a&gt;: 纯 JS 的 OCR 库支持 62 种语言。&lt;br&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://hanks.pub/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>请求代理</title>
    <link href="http://hanks.pub/2017/03/22/proxy-test/"/>
    <id>http://hanks.pub/2017/03/22/proxy-test/</id>
    <published>2017-03-22T13:10:52.000Z</published>
    <updated>2017-03-27T02:05:42.428Z</updated>
    
    <content type="html"><![CDATA[<p>爬虫过程中解决一些网站针对 IP 访问次数限制。下面进行简单模拟：</p>
<a id="more"></a>
<p>服务端： server.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">// 获取客户端 IP</span></div><div class="line">    <span class="keyword">var</span> ip = request.headers[<span class="string">'x-forwarded-for'</span>] ||</div><div class="line">             request.connection.remoteAddress ||</div><div class="line">             request.socket.remoteAddress ||</div><div class="line">             request.connection.socket.remoteAddress;</div><div class="line">    <span class="built_in">console</span>.log(request.headers);</div><div class="line">    <span class="built_in">console</span>.log(request.httpVersion);</div><div class="line">    <span class="built_in">console</span>.log(request.method);</div><div class="line">    <span class="built_in">console</span>.log(request.url);</div><div class="line">    <span class="built_in">console</span>.log(ip);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'-----------'</span>)</div><div class="line">    response.write(<span class="string">"OK"</span>);</div><div class="line">    response.end();</div><div class="line">&#125;).listen(<span class="number">8889</span>);</div></pre></td></tr></table></figure>
<h2 id="正常请求"><a href="#正常请求" class="headerlink" title="正常请求"></a>正常请求</h2><p>客户端： index.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">"request"</span>)</div><div class="line"><span class="comment">// 未加代理的情况</span></div><div class="line">request(<span class="string">'http://104.194.66.230:8889/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'error:'</span>, error); </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'statusCode:'</span>, response &amp;&amp; response.statusCode); </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'body:'</span>, body);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/5f161f05-07d4-4b15-8274-06c8a643ffb6.png" alt="正常访问"> </p>
<h2 id="客户端使用代理"><a href="#客户端使用代理" class="headerlink" title="客户端使用代理"></a>客户端使用代理</h2><p>客户端： index.js</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var request = require(<span class="string">"request"</span>)</div><div class="line">request(&#123;</div><div class="line">        'url':'http<span class="symbol">://104</span>.<span class="number">194.66</span>.<span class="number">230</span>:<span class="number">8889</span>/',</div><div class="line">        'proxy':'http<span class="symbol">://111</span>.<span class="number">7.130</span>.<span class="number">36</span>:<span class="number">8080</span>' // proxy</div><div class="line">    &#125;, </div><div class="line">    function (<span class="name">error</span>, response, body) &#123;</div><div class="line">        console.log('error:', error)<span class="comment">;</span></div><div class="line">        console.log('statusCode:', response <span class="symbol">&amp;&amp;</span> response.statusCode)<span class="comment">;</span></div><div class="line">        console.log('body:', body)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/308e9c14-436c-4180-b0d0-921b73c25a30.png" alt="使用代理"> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爬虫过程中解决一些网站针对 IP 访问次数限制。下面进行简单模拟：&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="http://hanks.pub/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="代理" scheme="http://hanks.pub/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Android 自定义 view 连接输入法</title>
    <link href="http://hanks.pub/2017/02/16/android-customview-inputmethod/"/>
    <id>http://hanks.pub/2017/02/16/android-customview-inputmethod/</id>
    <published>2017-02-16T14:33:39.000Z</published>
    <updated>2017-03-27T02:05:42.045Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>View</code> 的源码里面有一个方法名为： <code>onCreateInputConnection</code> , 通过该方法可使自定义 view 连接 inputMethod, 可以接受输入信息。该方法的解释如下：<br><a id="more"></a></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Create a new InputConnection <span class="keyword">for</span> an InputMethod <span class="keyword">to</span> interact</div><div class="line"> * <span class="keyword">with</span> <span class="keyword">the</span> view.  The default implementation returns null, <span class="keyword">since</span> <span class="keyword">it</span> doesn't</div><div class="line"> * support input methods.  You can override this <span class="keyword">to</span> implement such support.</div><div class="line"> * This <span class="keyword">is</span> only needed <span class="keyword">for</span> views <span class="keyword">that</span> take focus <span class="keyword">and</span> <span class="built_in">text</span> input.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;When implementing this, you probably also want <span class="keyword">to</span> implement</div><div class="line"> * &#123;@link <span class="comment">#onCheckIsTextEditor()&#125; to indicate you will return a</span></div><div class="line"> * non-null InputConnection.&lt;/p&gt;</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Also, take good care <span class="keyword">to</span> fill <span class="keyword">in</span> <span class="keyword">the</span> &#123;@link android.view.inputmethod.EditorInfo&#125;</div><div class="line"> * object correctly <span class="keyword">and</span> <span class="keyword">in</span> <span class="keyword">its</span> entirety, so <span class="keyword">that</span> <span class="keyword">the</span> connected IME can rely</div><div class="line"> * <span class="keyword">on</span> <span class="keyword">its</span> values. For example, &#123;@link android.view.inputmethod.EditorInfo<span class="comment">#initialSelStart&#125;</span></div><div class="line"> * <span class="keyword">and</span>  &#123;@link android.view.inputmethod.EditorInfo<span class="comment">#initialSelEnd&#125; members</span></div><div class="line"> * must be filled <span class="keyword">in</span> <span class="keyword">with</span> <span class="keyword">the</span> correct cursor position <span class="keyword">for</span> IMEs <span class="keyword">to</span> work correctly</div><div class="line"> * <span class="keyword">with</span> your <span class="built_in">application</span>.&lt;/p&gt;</div><div class="line"> *</div><div class="line"> * @param outAttrs Fill <span class="keyword">in</span> <span class="keyword">with</span> attribute information <span class="keyword">about</span> <span class="keyword">the</span> connection.</div><div class="line"> */</div><div class="line">public InputConnection onCreateInputConnection(EditorInfo outAttrs) &#123;</div><div class="line"><span class="built_in">    return</span> null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>onCreateInputConnection 方法连接了 view 和 inputMethod，通过创建一个 InputConnection 来接受输入法的信息。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by hanks on 2017/2/16.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KInputConnection</span> <span class="keyword">extends</span> <span class="title">BaseInputConnection</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KInputConnection</span><span class="params">(View targetView, <span class="keyword">boolean</span> fullEditor)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(targetView, fullEditor);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 输入法的按键信息</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">sendKeyEvent</span><span class="params">(KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (event.getKeyCode()) &#123;</div><div class="line">            <span class="keyword">case</span> KeyEvent.KEYCODE_DEL:</div><div class="line">                <span class="keyword">if</span> (event.getAction()== KeyEvent.ACTION_UP</div><div class="line">                        &amp;&amp; onCommitTextListener != <span class="keyword">null</span>) &#123;</div><div class="line">                    onCommitTextListener.onDeleteText();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">sendKeyEvent</span><span class="params">(event)</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 输入法提交了一个 text</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">commitText</span><span class="params">(CharSequence text, <span class="keyword">int</span> newCursorPosition)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (onCommitTextListener != <span class="keyword">null</span>) &#123;</div><div class="line">            onCommitTextListener.commitText(text, newCursorPosition);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OnCommitTextListener  onCommitTextListener;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setOnCommitTextListener</span><span class="params">(OnCommitTextListener onCommitTextListener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.onCommitTextListener = onCommitTextListener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnCommitTextListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">commitText</span><span class="params">(CharSequence text, <span class="keyword">int</span> newCursorPosition)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onDeleteText</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 支持输入法的 view</div><div class="line"> * Created by hanks on 2017/2/16.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KInputView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> StringBuilder content = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">private</span> KInputConnection inputConnection;</div><div class="line">    <span class="keyword">private</span> TextPaint paint;</div><div class="line">    <span class="keyword">private</span> InputMethodManager inputMethodManager;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KInputView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KInputView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 设置可以接受到焦点</span></div><div class="line">        <span class="keyword">this</span>.setFocusable(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">this</span>.setFocusableInTouchMode(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 获取 InputMethodManager</span></div><div class="line">        inputMethodManager = (InputMethodManager) getContext().getSystemService(Context.INPUT_METHOD_SERVICE);</div><div class="line"></div><div class="line">        paint = <span class="keyword">new</span> TextPaint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">        paint.setColor(Color.BLUE);</div><div class="line">        <span class="keyword">float</span> textSize = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, <span class="number">14</span>, getResources().getDisplayMetrics());</div><div class="line">        paint.setTextSize(textSize);</div><div class="line">        setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="comment">// 弹出、关闭输入法</span></div><div class="line">                inputMethodManager.toggleSoftInput(<span class="number">0</span>, InputMethodManager.HIDE_NOT_ALWAYS);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">InputConnection <span class="title">onCreateInputConnection</span><span class="params">(EditorInfo editorInfo)</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="title">getInputConnection</span><span class="params">(editorInfo)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="comment">// 使用 StaticLayout 来 draw</span></div><div class="line">        <span class="keyword">new</span> StaticLayout(content, paint, getWidth(), Layout.Alignment.ALIGN_NORMAL, <span class="number">1.5</span>f, <span class="number">0</span>, <span class="keyword">false</span>).draw(canvas);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function">InputConnection <span class="title">getInputConnection</span><span class="params">(EditorInfo editorInfo)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (inputConnection != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> inputConnection;</div><div class="line">        &#125;</div><div class="line">        inputConnection = <span class="keyword">new</span> KInputConnection(<span class="keyword">this</span>, <span class="keyword">false</span>);</div><div class="line">        inputConnection.setOnCommitTextListener(<span class="keyword">new</span> KInputConnection.OnCommitTextListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">commitText</span><span class="params">(CharSequence text, <span class="keyword">int</span> newCursorPosition)</span> </span>&#123;</div><div class="line">                content.append(text);</div><div class="line">                invalidate();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDeleteText</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (content.length() &lt;= <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                content.deleteCharAt(content.length() - <span class="number">1</span>);</div><div class="line">                invalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> inputConnection;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://dn-coding-net-production-pp.qbox.me/ef22bd81-91e8-4203-b695-2ba86c7b8dc6.gif" alt="自定义 View"> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;code&gt;View&lt;/code&gt; 的源码里面有一个方法名为： &lt;code&gt;onCreateInputConnection&lt;/code&gt; , 通过该方法可使自定义 view 连接 inputMethod, 可以接受输入信息。该方法的解释如下：&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://hanks.pub/tags/Android/"/>
    
      <category term="View" scheme="http://hanks.pub/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android 与 Lua</title>
    <link href="http://hanks.pub/2017/01/10/android-lua/"/>
    <id>http://hanks.pub/2017/01/10/android-lua/</id>
    <published>2017-01-10T15:18:29.000Z</published>
    <updated>2017-07-10T11:02:57.974Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.lua.org/" target="_blank" rel="external">Lua</a>: 一种轻量语言，由标准C编写而成，体积小，启动速度快。Lua 有一个同时进行的 JIT 项目，提供在特定平台上的即时编译功能。<br><a id="more"></a><br><a href="http://www.luaj.org/luaj/3.0/README.html" target="_blank" rel="external">LuaJ</a>：<br>Luaj 是一个 Java 的 Lua 解释器，基于 Lua 5.2.x 版本，目的是：</p>
<ul>
<li>基于 Java 的实现，可以在 Java 应用中集成 Lua 虚拟机</li>
<li>轻量级、高性能的执行 Lua</li>
<li>多平台支持</li>
<li>完整的库和工具支持</li>
<li>可在 Java ME、SE 和 EE 环境中执行</li>
<li>luajava api 支持</li>
<li>混合调试</li>
</ul>
<p><a href="https://github.com/mkottman/AndroLua" target="_blank" rel="external">AndroLua</a> :<br><code>Androlua</code> 是安卓平台上的用 Lua 开发安卓程序的工具，不仅支持调用Java API，而且支持编写安卓界面程序，还可以将自己写的 Lua 程序打包成 apk 安装文件安装。Lua 语言的简单使没有任何编程经验的用户也能在短时间内开发出安卓程序。(来自百度<a href="http://baike.baidu.com/link?url=uKUBS37YCr-ASuAsGJH4RaS2dTbm0AUq_1la8TGBJUHrdjkeFhTwqbxJy4OZkagOI146bPK0csWnijBr-zQ2uLOzN4f_pJGkWOcd5jWf-Hm" target="_blank" rel="external">百科</a>)</p>
<p><a href="https://github.com/alibaba/LuaViewSDK" target="_blank" rel="external">LuaViewSDK - Android版</a><br><code>LuaViewSDK</code> 由阿里聚划算无线开发团队开发并维护， LuaView 是一种运行在一个 ViewController/Activity 中，可以<strong>灵活加载</strong> Lua 脚本，并能够按照 <strong>Native</strong> 的方式运行的一种面向业务的开发技术方案。可以快速开发电商应用中既要求体验又要求灵活性的页面功能，例如首页，类目首页，垂直频道，大促活动会场等。LuaViewSDK 还有 iOS 版。</p>
<h3 id="LuaViewSDK-体验"><a href="#LuaViewSDK-体验" class="headerlink" title="LuaViewSDK 体验"></a>LuaViewSDK 体验</h3><p>官方文档放了一个很详细的入门文档 👉<a href="https://github.com/alibaba/LuaViewSDK/blob/master/Android/Documentation/%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8-android/%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%20-%20android.md" target="_blank" rel="external">新手入门 - android</a></p>
<p>下面的是我自己创建的项目，加载 assets 目录下的 <code>haha.lua</code> 文件<br> <img src="https://dn-coding-net-production-pp.qbox.me/37ef5cb2-98a7-406a-8cfc-ccfa8201bdec.png" alt="图片"> </p>
<p> 下面尝试加载外部的脚本文件， 我在 sd 卡上新建了一个 <code>local.lua</code> 脚本文件<br> 内容如下<br> <figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">w,h = System.screenSize();</div><div class="line">window.frame(<span class="number">0</span>, <span class="number">0</span>, w, h);</div><div class="line">window.backgroundColor(<span class="number">0x220000</span>);</div><div class="line"></div><div class="line">label = Label();</div><div class="line">label.frame(<span class="number">16</span>,<span class="number">16</span>,w, <span class="number">60</span>);</div><div class="line">label.text(<span class="string">"Local Hello World LuaView to Android"</span>);</div></pre></td></tr></table></figure></p>
<p> <img width="360px" src="https://dn-coding-net-production-pp.qbox.me/7e0b62b0-8f3b-40c1-85a7-a097bcebba1b.png" alt=""></p>
<p>我们页可加载服务器上的 lua 脚本，注意校验服务器的文件，防止 lua 脚本恶意攻击。</p>
<h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><ul>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-LUAScript/" target="_blank" rel="external">Lua 在移动平台上的应用</a></li>
<li>[]</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.lua.org/&quot;&gt;Lua&lt;/a&gt;: 一种轻量语言，由标准C编写而成，体积小，启动速度快。Lua 有一个同时进行的 JIT 项目，提供在特定平台上的即时编译功能。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://hanks.pub/tags/Android/"/>
    
      <category term="Lua" scheme="http://hanks.pub/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Android 下 Markdown 渲染</title>
    <link href="http://hanks.pub/2017/01/10/android-markdown-render/"/>
    <id>http://hanks.pub/2017/01/10/android-markdown-render/</id>
    <published>2017-01-10T15:03:07.000Z</published>
    <updated>2017-03-27T02:05:42.063Z</updated>
    
    <content type="html"><![CDATA[<p>Android 下的 <code>webview</code> 加载本地准备好的 html 外壳，然后通过与 js 交互将准备渲染的纯文本传给负责 <code>markdown</code> 渲染的 js 处理（此处使用的 <code>marked.js</code> ），将文本转化为 html 格式填充到 webview 中。</p>
<a id="more"></a>
<h3 id="html-外壳"><a href="#html-外壳" class="headerlink" title="html 外壳"></a>html 外壳</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">        @<span class="keyword">font-face</span> &#123;</div><div class="line">            <span class="attribute">font-family</span>: <span class="string">'customFont'</span>;</div><div class="line">            <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'file:///sdcard/manaco.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>);</div><div class="line">            <span class="attribute">font-weight</span>: normal;</div><div class="line">            <span class="attribute">font-style</span>: normal;</div><div class="line">        &#125;</div><div class="line">        *&#123;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">            <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-tag">body</span>&#123;</div><div class="line">            <span class="attribute">font-family</span>: customFont; <span class="comment">/* 设置字体 */</span></div><div class="line">            <span class="attribute">font-size</span>: <span class="number">12px</span>; <span class="comment">/* body 控制字体大小*/</span></div><div class="line">            <span class="attribute">color</span>: <span class="number">#000</span>; <span class="comment">/* 设置颜色 */</span></div><div class="line">            <span class="attribute">line-height</span>: <span class="number">1.5em</span>; <span class="comment">/* 设置行高*</span></div><div class="line">        &#125;</div><div class="line">     </div><div class="line">        //....定义渲染的css</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 加载 marked.js --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"marked.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">class</span>=<span class="string">"markdown-body"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">     <span class="comment">// 渲染文本为 html </span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parseMarkdown</span>(<span class="params">content, gfmEnabled</span>) </span>&#123;</div><div class="line">        marked.setOptions(&#123;</div><div class="line">            <span class="attr">renderer</span>: <span class="keyword">new</span> marked.Renderer(),</div><div class="line">            <span class="attr">gfm</span>: gfmEnabled,</div><div class="line">            <span class="attr">tables</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">breaks</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">pedantic</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">sanitize</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">smartLists</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">smartypants</span>: <span class="literal">false</span></div><div class="line">        &#125;);</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).innerHTML = marked(content);</div><div class="line">        parseDone();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parseDone</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="comment">//通知 java 层渲染完成</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeBackgroundColor</span>(<span class="params">color</span>)</span>&#123;</div><div class="line">        <span class="built_in">document</span>.body.style.background = color;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeFontSize</span>(<span class="params">size</span>)</span>&#123;</div><div class="line">        <span class="built_in">document</span>.body.style.fontSize  = size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeFontColor</span>(<span class="params">color</span>)</span>&#123;</div><div class="line">        <span class="built_in">document</span>.body.style.color= color;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeLineHeight</span>(<span class="params">lineHeight</span>)</span>&#123;</div><div class="line">        <span class="built_in">document</span>.body.style.lineHeight= lineHeight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="更改-webview-背景为透明"><a href="#更改-webview-背景为透明" class="headerlink" title="更改 webview 背景为透明"></a>更改 webview 背景为透明</h3><p>通过设置 webview 的属性<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">webView</span><span class="selector-class">.setBackgroundColor</span>(<span class="number">0</span>); <span class="comment">// 设置背景色透明</span></div></pre></td></tr></table></figure></p>
<h3 id="更改网页字体颜色"><a href="#更改网页字体颜色" class="headerlink" title="更改网页字体颜色"></a>更改网页字体颜色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFontColor</span><span class="params">(String color)</span> </span>&#123;</div><div class="line">    mWebView.loadUrl(String.format(<span class="string">"javascript:changeFontColor('%s')"</span>, color));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="更改网页字体大小"><a href="#更改网页字体大小" class="headerlink" title="更改网页字体大小"></a>更改网页字体大小</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> setFontSize(<span class="keyword">float</span> <span class="built_in">size</span>) &#123;</div><div class="line">    mWebView.loadUrl(<span class="keyword">String</span>.format(<span class="string">"javascript:changeFontSize(%s)"</span>, <span class="built_in">size</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="更改网页行间距"><a href="#更改网页行间距" class="headerlink" title="更改网页行间距"></a>更改网页行间距</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLineHeight</span><span class="params">(<span class="keyword">float</span> lineHeight)</span> </span>&#123;</div><div class="line">   mWebView.loadUrl(String.format(<span class="string">"javascript:changeLineHeight(%s)"</span>, lineHeight));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="更改网页字体"><a href="#更改网页字体" class="headerlink" title="更改网页字体"></a>更改网页字体</h3><p>通过 CSS 中的 @font-face，具体看上一篇写的 <a href="http://hanks-zyh.github.io/2017/01/09/android-webview-font/" target="_blank" rel="external">Android 中 webview 自定义字体</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 下的 &lt;code&gt;webview&lt;/code&gt; 加载本地准备好的 html 外壳，然后通过与 js 交互将准备渲染的纯文本传给负责 &lt;code&gt;markdown&lt;/code&gt; 渲染的 js 处理（此处使用的 &lt;code&gt;marked.js&lt;/code&gt; ），将文本转化为 html 格式填充到 webview 中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://hanks.pub/tags/Android/"/>
    
      <category term="WebView" scheme="http://hanks.pub/tags/WebView/"/>
    
      <category term="Markdown" scheme="http://hanks.pub/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Android 中 webview 自定义字体</title>
    <link href="http://hanks.pub/2017/01/09/android-webview-font/"/>
    <id>http://hanks.pub/2017/01/09/android-webview-font/</id>
    <published>2017-01-09T15:45:28.000Z</published>
    <updated>2017-03-27T02:05:42.077Z</updated>
    
    <content type="html"><![CDATA[<p>需求： 应用中的 webview 界面中可以使用 <strong>assets</strong> 目录以及 <strong>sdcard</strong> 的字体<br>原理： 通过更改 css 中的 <code>font-family</code> 属性更改字体，关键在于如果加载本地的字体，这就要使用到 css 的 <code>@font-face</code> 属性<br><a id="more"></a><br>效果图（右图为自定义字体）：</p>
<div style="display: flex; flex-direction: row;"><br>    <img src="http://o6epsoek1.bkt.clouddn.com/2017010914839770115679.jpg?imageView2/0/format/jpg" alt=""><br>    <img src="http://o6epsoek1.bkt.clouddn.com/20170109148397697952698.jpg?imageView2/0/format/jpg" alt=""><br></div>

<p>以下的一个例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">@<span class="keyword">font-face</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">'customFont'</span>;</div><div class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'file:///mnt/sdcard/manaco.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>);</div><div class="line">    <span class="attribute">font-weight</span>: normal;</div><div class="line">    <span class="attribute">font-style</span>: normal;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">font-family</span>: customFont;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>先通过 @font-face 加载本地字体，然后通过 font-family 设置元素的显示字体。设置 url 为本地文件路径（file://本地路径）来加载 sdcard 字体，如果要加载 assets 目录的字体将 url 改为 <code>file:///android_assets/manaco.ttf</code>。</p>
<p>截图由 <a href="http://coolapk.com/apk/xyz.hanks.note" target="_blank" rel="external"><strong>便签</strong></a> 生成</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需求： 应用中的 webview 界面中可以使用 &lt;strong&gt;assets&lt;/strong&gt; 目录以及 &lt;strong&gt;sdcard&lt;/strong&gt; 的字体&lt;br&gt;原理： 通过更改 css 中的 &lt;code&gt;font-family&lt;/code&gt; 属性更改字体，关键在于如果加载本地的字体，这就要使用到 css 的 &lt;code&gt;@font-face&lt;/code&gt; 属性&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://hanks.pub/tags/Android/"/>
    
      <category term="WebView" scheme="http://hanks.pub/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>slack bot</title>
    <link href="http://hanks.pub/2016/09/25/slack-bot/"/>
    <id>http://hanks.pub/2016/09/25/slack-bot/</id>
    <published>2016-09-25T13:36:49.000Z</published>
    <updated>2017-07-10T11:02:58.247Z</updated>
    
    <content type="html"><![CDATA[<p>##　創建機器人</p>
<p>利用机器人可以做一些重复性的工作。<br>创建 bot user，就是可以跟它进行实时聊天。<br><a id="more"></a></p>
<p><a href="https://api.slack.com/bot-users" target="_blank" rel="external">https://api.slack.com/bot-users</a><br><a href="https://my.slack.com/services/new/bot" target="_blank" rel="external">https://my.slack.com/services/new/bot</a></p>
<p><img src="https://ws4.sinaimg.cn/large/8c9b876fjw1f864v443vpj20se0ezq4m.jpg" alt="创建"></p>
<p>##　創建后拿到 token</p>
<p><img src="https://ws3.sinaimg.cn/large/8c9b876fjw1f864vqez0bj20sr0mrdio.jpg" alt="token"></p>
<h2 id="讓機器人在綫"><a href="#讓機器人在綫" class="headerlink" title="讓機器人在綫"></a>讓機器人在綫</h2><p>安装 <code>botkit</code>， <code>botkit</code> 是一个 node 的库。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> <span class="comment">--save botkit</span></div></pre></td></tr></table></figure>
<p>创建 <code>bot.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Botkit = <span class="built_in">require</span>(<span class="string">'botkit'</span>);</div><div class="line"><span class="keyword">var</span> controller = Botkit.slackbot();</div><div class="line"><span class="keyword">var</span> bot = controller.spawn(&#123;</div><div class="line">  <span class="attr">token</span>: your_slack_bot_token <span class="comment">// 填入申請的 token</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">bot.startRTM(<span class="function"><span class="keyword">function</span>(<span class="params">err,bot,payload</span>) </span>&#123; <span class="comment">//開啓實時聊天</span></div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Could not connect to Slack'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//處理來自客戶端發來的請求</span></div><div class="line">controller.hears([<span class="string">"keyword"</span>, <span class="string">"^pattern$"</span>], [<span class="string">"direct_message"</span>, <span class="string">"direct_mention"</span>, <span class="string">"mention"</span>, <span class="string">"ambient"</span>],</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">bot, message</span>) </span>&#123;</div><div class="line">        bot.reply(message, <span class="string">'You used a keyword!'</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">node</span> <span class="title">bot</span>.js</div></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/8c9b876fjw1f865asb5w4j20uk0j90ug.jpg" alt="聊天"></p>
<h2 id="機器人主動推送"><a href="#機器人主動推送" class="headerlink" title="機器人主動推送"></a>機器人主動推送</h2><p>調用 <code>bot.reply(message, &#39;You used a keyword!&#39;);</code></p>
<p>如<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">var</span> m = &#123;</div><div class="line">    <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'messag</span>e',</div><div class="line">    channel: <span class="symbol">'D2FFFEXS</span>7',</div><div class="line">    user: <span class="symbol">'U2CE0K88</span>0',</div><div class="line">    text: <span class="symbol">'o</span>p',</div><div class="line">    ts: <span class="symbol">'1474725618</span><span class="number">.000015</span>',</div><div class="line">    team: <span class="symbol">'T2BD7KZH</span>6',</div><div class="line">    event: <span class="symbol">'direct_messag</span>e',</div><div class="line">&#125;</div><div class="line">bot.reply(m, <span class="symbol">'gagagag</span>a'); <span class="comment">//發送消息給 user</span></div></pre></td></tr></table></figure></p>
<h2 id="自定義消息的樣式"><a href="#自定義消息的樣式" class="headerlink" title="自定義消息的樣式"></a>自定義消息的樣式</h2><p><a href="https://api.slack.com/docs/messages/builder" target="_blank" rel="external">https://api.slack.com/docs/messages/builder</a></p>
<p><img src="https://ws3.sinaimg.cn/large/8c9b876fjw1f865kgcc7dj20tl0o4djn.jpg" alt="自定义消息"></p>
<blockquote>
<p>文章来自： <a href="http://hanks.pub">http://hanks.pub</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##　創建機器人&lt;/p&gt;
&lt;p&gt;利用机器人可以做一些重复性的工作。&lt;br&gt;创建 bot user，就是可以跟它进行实时聊天。&lt;br&gt;
    
    </summary>
    
    
      <category term="bot" scheme="http://hanks.pub/tags/bot/"/>
    
      <category term="slack" scheme="http://hanks.pub/tags/slack/"/>
    
  </entry>
  
  <entry>
    <title>让网页更适配移动设备</title>
    <link href="http://hanks.pub/2016/09/19/webapp/"/>
    <id>http://hanks.pub/2016/09/19/webapp/</id>
    <published>2016-09-19T15:02:44.000Z</published>
    <updated>2017-07-10T11:02:58.294Z</updated>
    
    <content type="html"><![CDATA[<p>来看一下手机淘宝的效果。打开 chrome ， 输入 <a href="http://m.taobao.com" target="_blank" rel="external">http://m.taobao.com</a> ，等待页面加载完毕点击 chrome 菜单中的<strong>添加到主屏幕</strong>，看到可以在桌面生成一个快捷图标，点击图标进入，可以看到直接变成一个全屏的单独页面，给用户体的验更好。查看页面源码，发现需要添加以下代码去适配。<br><a id="more"></a><br><img src="http://ww2.sinaimg.cn/large/8c9b876fjw1f7zbeu2phdg20800ehhdx.gif" alt="淘宝"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  .....</div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns‐prefetch"</span> <span class="attr">href</span>=<span class="string">"http://image.uc.cn"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"yes"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"yes"</span> <span class="attr">name</span>=<span class="string">"apple-touch-fullscreen"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no,email=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"App-Config"</span> <span class="attr">content</span>=<span class="string">"fullscreen=yes,useHistoryState=yes,transition=yes"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://ww1.sinaimg.cn/large/8c9b876fjw1f7zaijlukpj2040040t8m.jpg"</span> <span class="attr">rel</span>=<span class="string">"Shortcut Icon"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">   .....</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里是我给自己的网页适配后的效果。更多配置可以转到<a href="https://developer.chrome.com/multidevice/android/installtohomescreen" target="_blank" rel="external">Install to Homescreen</a></p>
<p><img src="http://ww3.sinaimg.cn/large/8c9b876fjw1f7zbhegntsg20800eh4qs.gif" alt="joke"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://developer.chrome.com/multidevice/android/installtohomescreen" target="_blank" rel="external">https://developer.chrome.com/multidevice/android/installtohomescreen</a></li>
<li><a href="https://m.taobao.com" target="_blank" rel="external">https://m.taobao.com</a></li>
</ul>
<blockquote>
<p>文章来自： <a href="http://hanks.pub">http://hanks.pub</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来看一下手机淘宝的效果。打开 chrome ， 输入 &lt;a href=&quot;http://m.taobao.com&quot;&gt;http://m.taobao.com&lt;/a&gt; ，等待页面加载完毕点击 chrome 菜单中的&lt;strong&gt;添加到主屏幕&lt;/strong&gt;，看到可以在桌面生成一个快捷图标，点击图标进入，可以看到直接变成一个全屏的单独页面，给用户体的验更好。查看页面源码，发现需要添加以下代码去适配。&lt;br&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://hanks.pub/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>体验 weex —— 写一个表情包应用</title>
    <link href="http://hanks.pub/2016/09/05/weex-2333/"/>
    <id>http://hanks.pub/2016/09/05/weex-2333/</id>
    <published>2016-09-05T14:45:18.000Z</published>
    <updated>2017-07-10T11:02:58.300Z</updated>
    
    <content type="html"><![CDATA[<p>前些时间体验 ReactNative 的时候写了一个 2333 表情包 app，这次使用 <code>weex</code> 写一下。 weex 通过自己的一套 sdk 可以将一个 js 文件渲染成一个 native （android 或 iOS ）的 view 对象。 weex 语法参照 vue ，看过一点 vue 的文档所以写起来可以很快上手。有一点感受 <code>weex</code> 的文档感觉没有 RN 的清晰，还有尺寸单位还没搞清楚，浏览器预览的和生成的 android 版还是有差距，和 iOS 也尺寸不太对。<br><a id="more"></a><br><img src="http://ww2.sinaimg.cn/large/8c9b876fjw1f7j4ktor7hj20z40hqn2y.jpg" alt="weex"></p>
<p><img src="http://o6epsoek1.bkt.clouddn.com/12.gif" alt="brower"></p>
<p><img src="http://o6epsoek1.bkt.clouddn.com/13.gif" alt="android"></p>
<h2 id="安装-weex"><a href="#安装-weex" class="headerlink" title="安装 weex"></a>安装 weex</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g weex-toolkit</div></pre></td></tr></table></figure>
<h2 id="创建-index-we-文件"><a href="#创建-index-we-文件" class="headerlink" title="创建 index.we 文件"></a>创建 index.we 文件</h2><p>和 vue 类似 <code>template</code> 中放布局，<code>style</code> 放css，<code>script</code> 操作数据。</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">list</span> <span class="attr">class</span>=<span class="string">"main-list"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">cell</span>  <span class="attr">class</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123; isSelected ? 'row-select' :'row' &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">repeat</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;rows&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">index</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;$index&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">onclick</span>=<span class="string">"changeTid"</span> <span class="attr">tid</span>=</span></span><span class="template-variable">&#123;&#123;tid&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span><span class="template-variable">&#123;&#123;  title &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></div><div class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">cell</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">list</span> <span class="attr">class</span>=<span class="string">"main-detail"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">cell</span>  <span class="attr">class</span>=<span class="string">"image-row"</span> <span class="attr">repeat</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123; imageList &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> &gt;</span></span></div><div class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"image-item"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">repeat</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123;data&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line">               <span class="tag">&lt;<span class="name">image</span> <span class="attr">style</span>=<span class="string">"width:198;height:198;"</span> <span class="attr">src</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123; link &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></div><div class="line">             <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">cell</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.main</span>&#123;</div><div class="line">  <span class="attribute">flex-direction</span>: row;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#eceff1</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#333333</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main-list</span>&#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">  <span class="attribute">align-items</span>: stretch;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main-detail</span>&#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">4</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.row</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: white;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.row-select</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#e1e1e1</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">  <span class="attribute">border-bottom-width</span>: <span class="number">2</span>;</div><div class="line">  <span class="attribute">border-right-width</span>: <span class="number">2</span>;</div><div class="line">  <span class="attribute">border-bottom-color</span>: <span class="number">#eceff1</span>;</div><div class="line">  <span class="attribute">border-right-color</span>: <span class="number">#eceff1</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">68</span>;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">10</span>;</div><div class="line">  <span class="attribute">padding-right</span>: <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.image-item</span>&#123;</div><div class="line">  <span class="attribute">justify-content</span>: space-between;</div><div class="line">  <span class="attribute">flex-direction</span>: row;</div><div class="line">  <span class="attribute">height</span>: <span class="number">202</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.item-title</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">24</span>;</div><div class="line">  <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line"><span class="comment">// 使用的组件</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'weex-components'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">      <span class="attr">rows</span>: [],</div><div class="line">      <span class="attr">imageList</span>: [],</div><div class="line">      <span class="attr">currentTid</span>: <span class="number">128</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.getCategory()</div><div class="line">        <span class="keyword">this</span>.getImage(<span class="keyword">this</span>.currentTid)</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">      <span class="attr">getCategory</span>: <span class="function"><span class="keyword">function</span>(<span class="params">tid</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span></div><div class="line">        <span class="keyword">var</span> stream = <span class="built_in">require</span>(<span class="string">'@weex-module/stream'</span>);</div><div class="line">        <span class="comment">// 直接使用 fetch 以及 =&gt; 在预览中没问题，生成的 js 文件在 Android 版本渲染不出来，好像是不能直接支持 ES6 语法</span></div><div class="line">        stream.fetch(&#123;</div><div class="line">          <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">          <span class="attr">url</span>: <span class="string">'https://api.leancloud.cn/1.1/classes/Category'</span>,</div><div class="line">          <span class="attr">headers</span>: &#123;</div><div class="line">            <span class="string">'X-LC-Id'</span>: <span class="string">'ffTooBOPa3NxxjEo91dVYEel-gzGzoHsz'</span>,</div><div class="line">            <span class="string">'X-LC-Key'</span>: <span class="string">'aysIBDNEvw1n063qpf7Jx9jb'</span>,</div><div class="line">            <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></div><div class="line">          &#125;,</div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">ret</span>) </span>&#123;</div><div class="line">          <span class="keyword">if</span>(!ret.ok)&#123;</div><div class="line">            <span class="built_in">console</span>.log( <span class="string">"request failed"</span>)</div><div class="line">          &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(ret.data)</div><div class="line">            <span class="keyword">var</span> list = json.results</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i &lt; list.length; i++)&#123;</div><div class="line">                <span class="keyword">var</span> item = list[i]</div><div class="line">                item.isSelected = <span class="literal">false</span></div><div class="line">                that.rows.push(item)</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(response);</div><div class="line">        &#125;);</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      <span class="attr">getImage</span>: <span class="function"><span class="keyword">function</span>(<span class="params">tid</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span></div><div class="line">        <span class="keyword">var</span> stream = <span class="built_in">require</span>(<span class="string">'@weex-module/stream'</span>);</div><div class="line">        stream.fetch(&#123;</div><div class="line">          <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">          <span class="attr">url</span>: <span class="string">'https://api.leancloud.cn/1.1/classes/Image?where=&#123;"tid":'</span>+tid+<span class="string">'&#125;&#125;&amp;order=-update_time'</span>,</div><div class="line">          <span class="attr">headers</span>: &#123;</div><div class="line">            <span class="string">'X-LC-Id'</span>: <span class="string">'ffTooBOPa3NxxjEo91dVYEel-gzGzoHsz'</span>,</div><div class="line">            <span class="string">'X-LC-Key'</span>: <span class="string">'aysIBDNEvw1n063qpf7Jx9jb'</span>,</div><div class="line">            <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></div><div class="line">          &#125;,</div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">ret</span>) </span>&#123;</div><div class="line">          <span class="keyword">if</span>(!ret.ok)&#123;</div><div class="line">            <span class="built_in">console</span>.log( <span class="string">"request failed"</span>)</div><div class="line">          &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(ret.data)</div><div class="line">            <span class="keyword">var</span> list = json.results</div><div class="line">            that.imageList.length = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++)&#123;</div><div class="line">              <span class="keyword">var</span> imageRow;</div><div class="line">              <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</div><div class="line">                  imageRow = [];</div><div class="line">                  that.imageList.push(&#123;<span class="string">'data'</span>:imageRow&#125;);</div><div class="line">              &#125;</div><div class="line">              imageRow[i%<span class="number">3</span>] = list[i];</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">console</span>.log(that.imageList);</div><div class="line">          &#125;</div><div class="line">        &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(response);</div><div class="line">        &#125;);</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      <span class="attr">changeTid</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(e);</div><div class="line">        <span class="keyword">this</span>.currentTid = e.target.attr.tid</div><div class="line">        <span class="keyword">this</span>.getImage(<span class="keyword">this</span>.currentTid)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.rows.length; i++) &#123;</div><div class="line">          <span class="keyword">var</span> row = <span class="keyword">this</span>.rows[i]</div><div class="line">          row.isSelected = row.tid  ==   <span class="keyword">this</span>.currentTid</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="运行起来"><a href="#运行起来" class="headerlink" title="运行起来"></a>运行起来</h2><p>浏览器中预览</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">weex <span class="keyword">index</span>.we</div></pre></td></tr></table></figure>
<p>生成 js 文件</p>
<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">weex <span class="keyword">index</span> -o <span class="keyword">build</span>.js</div></pre></td></tr></table></figure>
<h2 id="跑在-Android-项目中"><a href="#跑在-Android-项目中" class="headerlink" title="跑在 Android 项目中"></a>跑在 Android 项目中</h2><p>新建 Android 项目， 在项目中添加 <code>weex</code> sdk 的依赖库。<br><code>app/build.gradle</code></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:24.0.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:24.0.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.github.bumptech.glide:glide:3.7.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.alibaba:fastjson:1.1.46.android'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.taobao.android:weex_sdk:0.7.0'</span> <span class="comment">// weex sdk</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.taobao.android:weex_inspector:0.0.2.7'</span> <span class="comment">// weex 调试 sdk ，这个必须得加</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建自己的 Application 类，然后 onCreated 中初始化 weex</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by hanks on 16/9/5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        WXEnvironment.addCustomOptions(<span class="string">"appName"</span>, <span class="string">"TBSample"</span>);</div><div class="line">        InitConfig config = <span class="keyword">new</span> InitConfig.Builder()</div><div class="line">                .setImgAdapter(<span class="keyword">new</span> ImageAdapter())</div><div class="line">                .build();</div><div class="line">        WXSDKEngine.initialize(<span class="keyword">this</span>, config);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>初始化完成之后就是加载 js 了，将上一步生成的 js 复制到 assets 目录</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> FrameLayout mContainer;</div><div class="line">    <span class="keyword">private</span> WXSDKInstance mWeexInstance;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        mContainer = (FrameLayout) findViewById(R.id.container);</div><div class="line">        <span class="comment">// sdk 实例</span></div><div class="line">        mWeexInstance = <span class="keyword">new</span> WXSDKInstance(<span class="keyword">this</span>);</div><div class="line">        mWeexInstance.registerRenderListener(<span class="keyword">new</span> IWXRenderListener() &#123;</div><div class="line"></div><div class="line">            <span class="comment">// sdk 将 js 文件渲染成 view 对象回调</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(WXSDKInstance wxsdkInstance, View view)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (mContainer != <span class="keyword">null</span>) &#123;</div><div class="line">                    mContainer.addView(view); <span class="comment">// 添加到界面</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRenderSuccess</span><span class="params">(WXSDKInstance wxsdkInstance, <span class="keyword">int</span> i, <span class="keyword">int</span> i1)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefreshSuccess</span><span class="params">(WXSDKInstance wxsdkInstance, <span class="keyword">int</span> i, <span class="keyword">int</span> i1)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(WXSDKInstance wxsdkInstance, String s, String s1)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 加载 js 文件</span></div><div class="line">        mWeexInstance.render(<span class="string">"Weex2333"</span>,</div><div class="line">                WXFileUtils.loadAsset(<span class="string">"build.js"</span>, <span class="keyword">this</span>),</div><div class="line">                <span class="keyword">null</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">1</span>,</div><div class="line">                WXRenderStrategy.APPEND_ASYNC);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后运行 Android 项目。</p>
<p>iOS 工程暂时没有跑起来 &gt;.&lt;</p>
<blockquote>
<p>文章来自： <a href="http://hanks.pub">http://hanks.pub</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前些时间体验 ReactNative 的时候写了一个 2333 表情包 app，这次使用 &lt;code&gt;weex&lt;/code&gt; 写一下。 weex 通过自己的一套 sdk 可以将一个 js 文件渲染成一个 native （android 或 iOS ）的 view 对象。 weex 语法参照 vue ，看过一点 vue 的文档所以写起来可以很快上手。有一点感受 &lt;code&gt;weex&lt;/code&gt; 的文档感觉没有 RN 的清晰，还有尺寸单位还没搞清楚，浏览器预览的和生成的 android 版还是有差距，和 iOS 也尺寸不太对。&lt;br&gt;
    
    </summary>
    
    
      <category term="weex" scheme="http://hanks.pub/tags/weex/"/>
    
  </entry>
  
  <entry>
    <title>WebView 实现 NestedScrollingChild</title>
    <link href="http://hanks.pub/2016/08/31/nestedscrollchild/"/>
    <id>http://hanks.pub/2016/08/31/nestedscrollchild/</id>
    <published>2016-08-31T14:30:52.000Z</published>
    <updated>2017-07-10T11:02:58.211Z</updated>
    
    <content type="html"><![CDATA[<p>承接上文 <a href="http://hanks.xyz/2016/08/29/nestedchildparent/" target="_blank" rel="external">NestedScrollingParent 实现复杂交互效果</a> ，在 <code>NestedScroll</code> 这一套流程中，<code>NestedScrollingChild</code> 不用考虑怎么去通知父布局如何滚动，只需要负责自己的事情：<strong>产生滚动</strong>事件，并<strong>将事件共享出去</strong>，<strong>产生 fling</strong> 事件，<strong>共享 fling</strong> 。</p>
<a id="more"></a>
<p>NestedScrollingParent 简称 <code>NP</code><br>NestedScrollingChild 简称 <code>NC</code></p>
<ol>
<li><p>NC 调用 <code>startNestedScroll()</code> 通知 NP 的 <code>onStartNestedScroll</code> （具体是怎么通知到 NP 的参考 源码）</p>
</li>
<li><p>NC 产生一个 Touch 事件，如滚动 5 个像素，然后调用 <code>dispatchNestedPreScroll</code> 通知 NP 自己要滚动 5个像素， NP 收到通知后根据自身需要进行消费，如消费了 2 个像素，然后将结果通知到 NC </p>
</li>
<li><p>NC 将剩下的 3 个像素进行自身消费，如此时滚动了 2 个像素到达了边界，还剩下 1 个像素没有消费掉，然后就调用 <code>dispatchNestedScroll</code> 将剩下的未消费的 1 个像素共享出去。</p>
</li>
<li><p>Fling 事件类似 Scroll 事件</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by hanks on 16/8/30.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeWebView</span> <span class="keyword">extends</span> <span class="title">WebView</span> <span class="keyword">implements</span> <span class="title">NestedScrollingChild</span>, <span class="title">ScrollListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = CodeWebView.class.getSimpleName();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UP = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DOWN = -<span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] mScrollOffset = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] mScrollConsumed = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mTouchSlop;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mMinimumVelocity;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mMaximumVelocity;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> direction = DOWN; <span class="comment">// TODO 还需要同步到父布局的方向</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastMotionY;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mNestedYOffset;</div><div class="line">    <span class="keyword">private</span> NestedScrollingChildHelper mChildHelper;</div><div class="line">    <span class="keyword">private</span> VelocityTracker mVelocityTracker;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> allowFly;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> downY;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mDownY = -<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeWebView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeWebView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeWebView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        </div><div class="line">        mChildHelper = <span class="keyword">new</span> NestedScrollingChildHelper(<span class="keyword">this</span>); <span class="comment">// 辅助类</span></div><div class="line">        setNestedScrollingEnabled(<span class="keyword">true</span>); <span class="comment">// 设置支持 NestedScrolling</span></div><div class="line">        </div><div class="line">        <span class="keyword">final</span> ViewConfiguration configuration = ViewConfiguration.get(getContext());</div><div class="line">        mTouchSlop = configuration.getScaledTouchSlop();</div><div class="line">        mMinimumVelocity = configuration.getScaledMinimumFlingVelocity();</div><div class="line">        mMaximumVelocity = configuration.getScaledMaximumFlingVelocity();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">boolean</span> eventAddedToVelocityTracker = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> action = MotionEventCompat.getActionMasked(event);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = MotionEventCompat.getActionIndex(event);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mVelocityTracker == <span class="keyword">null</span>) &#123;</div><div class="line">            mVelocityTracker = VelocityTracker.obtain();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (action) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                allowFly = <span class="keyword">false</span>;</div><div class="line">                downY = (<span class="keyword">int</span>) event.getRawY();</div><div class="line">                <span class="comment">// 开始 NestedScroll</span></div><div class="line">                startNestedScroll(ViewCompat.SCROLL_AXIS_VERTICAL);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                <span class="keyword">int</span> moveY = (<span class="keyword">int</span>) event.getRawY();</div><div class="line">                <span class="keyword">int</span> dy = -(moveY - downY); <span class="comment">//滚动方法的方向跟坐标是相反的，所以这里要加一个负号</span></div><div class="line">                downY = moveY;</div><div class="line">                <span class="comment">//在consumed 中就是父类滑动的距离，</span></div><div class="line">                <span class="keyword">if</span> (dispatchNestedPreScroll(<span class="number">0</span>, dy, mScrollConsumed, mScrollOffset)) &#123;</div><div class="line">                    dy -= mScrollConsumed[<span class="number">1</span>]; <span class="comment">// 减去父类消费的距离</span></div><div class="line">                    scrollBy(<span class="number">0</span>, dy); <span class="comment">// 剩下的自己消费</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">            </div><div class="line">                mVelocityTracker.addMovement(event);</div><div class="line">                eventAddedToVelocityTracker = <span class="keyword">true</span>;</div><div class="line">                mVelocityTracker.computeCurrentVelocity(<span class="number">1000</span>, mMaximumVelocity);</div><div class="line">                <span class="keyword">int</span> mScrollPointerId = MotionEventCompat.getPointerId(event, actionIndex);</div><div class="line">                <span class="keyword">float</span> vY = -VelocityTrackerCompat.getYVelocity(mVelocityTracker, mScrollPointerId); </div><div class="line">                <span class="comment">// 产生 fling 事件</span></div><div class="line">                <span class="keyword">if</span> (Math.abs(vY) &gt; mMinimumVelocity &amp;&amp; !dispatchNestedPreFling(<span class="number">0</span>, vY)) &#123;</div><div class="line">                    dispatchNestedFling(<span class="number">0</span>, vY, <span class="keyword">true</span>);</div><div class="line">                    logi(<span class="string">"dispatchNestedFling"</span>);</div><div class="line">                &#125;</div><div class="line">                resetTouch();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!eventAddedToVelocityTracker) &#123;</div><div class="line">            mVelocityTracker.addMovement(event);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetTouch</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mVelocityTracker != <span class="keyword">null</span>) &#123;</div><div class="line">            mVelocityTracker.clear();</div><div class="line">        &#125;</div><div class="line">        stopNestedScroll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNestedScrollingEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</div><div class="line">        mChildHelper.setNestedScrollingEnabled(enabled);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startNestedScroll</span><span class="params">(<span class="keyword">int</span> axes)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mChildHelper.startNestedScroll(axes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopNestedScroll</span><span class="params">()</span> </span>&#123;</div><div class="line">        mChildHelper.stopNestedScroll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNestedScrollingParent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mChildHelper.hasNestedScrollingParent();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchNestedScroll</span><span class="params">(<span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed, <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed, <span class="keyword">int</span>[] offsetInWindow)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mChildHelper.dispatchNestedScroll(dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed, offsetInWindow);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchNestedPreScroll</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span>[] consumed, <span class="keyword">int</span>[] offsetInWindow)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mChildHelper.dispatchNestedPreScroll(dx, dy, consumed, offsetInWindow);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchNestedFling</span><span class="params">(<span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY, <span class="keyword">boolean</span> consumed)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mChildHelper.dispatchNestedFling(velocityX, velocityY, consumed);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchNestedPreFling</span><span class="params">(<span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mChildHelper.dispatchNestedPreFling(velocityX, velocityY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.e(TAG, s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logi</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.i(TAG, s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logw</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.w(TAG, s);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>文章来自： <a href="http://hanks.pub">http://hanks.pub</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;承接上文 &lt;a href=&quot;http://hanks.xyz/2016/08/29/nestedchildparent/&quot;&gt;NestedScrollingParent 实现复杂交互效果&lt;/a&gt; ，在 &lt;code&gt;NestedScroll&lt;/code&gt; 这一套流程中，&lt;code&gt;NestedScrollingChild&lt;/code&gt; 不用考虑怎么去通知父布局如何滚动，只需要负责自己的事情：&lt;strong&gt;产生滚动&lt;/strong&gt;事件，并&lt;strong&gt;将事件共享出去&lt;/strong&gt;，&lt;strong&gt;产生 fling&lt;/strong&gt; 事件，&lt;strong&gt;共享 fling&lt;/strong&gt; 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://hanks.pub/tags/Android/"/>
    
      <category term="NestedScrolling" scheme="http://hanks.pub/tags/NestedScrolling/"/>
    
  </entry>
  
  <entry>
    <title>NestedScrollingParent 实现复杂交互效果</title>
    <link href="http://hanks.pub/2016/08/29/nestedchildparent/"/>
    <id>http://hanks.pub/2016/08/29/nestedchildparent/</id>
    <published>2016-08-29T13:49:44.000Z</published>
    <updated>2017-07-10T11:02:58.206Z</updated>
    
    <content type="html"><![CDATA[<p>最终效果：<br>上下排列 3 个 view， 依次为 RecyclerView ，NestedScrollView，RecyclerView，规则：子 View 可以滚动时 Touch 事件给子 view 消费，否则给父布局。</p>
<p><img src="http://ww3.sinaimg.cn/large/8c9b876fjw1f7asx0kp5rg20b40jlx6s.gif" alt="img" width="240" height="427"></p>
<a id="more"></a>
<h2 id="1-接口"><a href="#1-接口" class="headerlink" title="1. 接口"></a>1. 接口</h2><p><code>NestedScrollingParent</code> 用来配置子视图（ <code>NestedScrollingChild</code> ）嵌套滚动。</p>
<p><code>NestedScrollingParent</code> 简称 <code>NP</code><br><code>NestedScrollingChild</code> 简称 <code>NC</code></p>
<ol>
<li>NC 产生一个 touch 事件，调用 <code>startNestedScroll</code>，表示开始分享出去 touch 事件， NP 的 <code>onStartNestedScroll</code> 判断是否需要跟 NC 配合，返回 true 表示接受</li>
<li>NC 调用 <code>dispatchNestedPreScroll</code> ，通知 NP 将要进行一个 Touch 事件，如移动 5个像素，NP 的 <code>onNestedPreScroll</code> 中收到通知，知道 NC 要准备移动5个像素，这时候 NP 正好也需要滑动 2 个像素，然后在 <code>onNestedPreScroll</code> 的参数 <code>consumed[]</code> 数组对应的方向（下标为0的x轴，下标为1的y轴）赋值 2，表示消费 2 个像素</li>
<li><p>NC 拿到 <code>consumed[]</code> 数组，知道 NP 消费了 2 个像素，剩下了 3 个像素，然后自己根据需要再移动 3 个像素的距离，如果这时候 NC 由于某个原因只移动了 2 个像素，那么剩下的 1 个像素距离会调用 <code>dispatchNestedScroll</code> 给 NP，NP 在 <code>onNestedScroll</code> 处理剩下的未消费的 1 像素。最后，NC 调用 <code>stopNestedScroll</code> ，最后 NP 调用 <code>onStopNestedScroll</code>结束。</p>
</li>
<li><p>同 NestedScroll 类似的还有一套 NestedFling 操作，整体流程类似，NC 快速滑动产生一个 fling 事件，处理流程 NC.<code>dispatchNestedPreFling</code> -&gt; NP.<code>onNestedPreFling</code> -&gt; NC.<code>dispatchNestedFling</code> -&gt; NP.<code>onNestedFling</code></p>
</li>
</ol>
<p>为什么 NC 和 NP 能相互配合滚动？ 主要的源码在 <a href="http://androidxref.com/7.0.0_r1/xref/frameworks/support/v4/java/android/support/v4/view/NestedScrollingChildHelper.java" target="_blank" rel="external">NestedScrollingChildHelper</a> 和  <a href="http://androidxref.com/7.0.0_r1/xref/frameworks/support/v4/java/android/support/v4/view/NestedScrollingParentHelper.java" target="_blank" rel="external">NestedScrollingParentHelper</a></p>
<h2 id="效果实现"><a href="#效果实现" class="headerlink" title="效果实现"></a>效果实现</h2><p>自定 ViewGroup ，实现 <code>NestedScrollingParent</code> 接口，一个 <code>NestedScrollingParentHelper</code> 成员变量作为辅助</p>
<p>布局<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">xyz.hanks.nestedwebview.nestedscroll.NScrollView</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/recyclerView0"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#20f0"</span></div><div class="line">        <span class="attr">android:scrollbarSize</span>=<span class="string">"3dp"</span></div><div class="line">        <span class="attr">android:scrollbars</span>=<span class="string">"vertical"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#e1e1e1"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"cdsadadlick"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"asddasda"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"asdadarewe"</span>/&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/recyclerView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#2f00"</span></div><div class="line">        <span class="attr">android:scrollbarStyle</span>=<span class="string">"insideInset"</span></div><div class="line">        <span class="attr">android:scrollbars</span>=<span class="string">"vertical"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">xyz.hanks.nestedwebview.nestedscroll.NScrollView</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>基础的 onMeasure ，onLayout</p>
<p><img src="http://ww1.sinaimg.cn/large/8c9b876fjw1f7ay490vzjj20ga0xgwf5.jpg" alt="onLayout"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * NestedScrollView</div><div class="line"> * Created by hanks on 16/8/22.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NScrollView</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> <span class="keyword">implements</span> <span class="title">NestedScrollingParent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"NScrollView"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxDistance = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalHeight = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> NestedScrollingParentHelper mParentHelper;</div><div class="line">    <span class="keyword">private</span> List&lt;View&gt; nestedScrollingChildList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> ScrollerCompat scroller;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NScrollView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NScrollView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NScrollView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        setOverScrollMode(View.OVER_SCROLL_NEVER);</div><div class="line">        mParentHelper = <span class="keyword">new</span> NestedScrollingParentHelper(<span class="keyword">this</span>);</div><div class="line">        scroller = ScrollerCompat.create(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getChildCount(); i++) &#123;</div><div class="line">            View child = getChildAt(i);</div><div class="line">            measureChild(child, widthMeasureSpec, heightMeasureSpec);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> parentHeight = getMeasuredHeight();</div><div class="line">        <span class="keyword">int</span> top = t;</div><div class="line">        <span class="keyword">int</span> lastChildHeight = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getChildCount(); i++) &#123;</div><div class="line">            View child =  getChildAt(i);</div><div class="line">            LayoutParams layoutParams = child.getLayoutParams();</div><div class="line">            <span class="keyword">if</span> (layoutParams.height == LayoutParams.MATCH_PARENT) &#123;</div><div class="line">                layoutParams.height = parentHeight;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> childMeasuredHeight = child.getMeasuredHeight();</div><div class="line">                layoutParams.height = childMeasuredHeight;</div><div class="line">            &#125;</div><div class="line">            log(child + <span class="string">","</span> + layoutParams.height);</div><div class="line">            child.setLayoutParams(layoutParams);</div><div class="line">            child.layout(l, top, r, top + layoutParams.height);</div><div class="line">            top += layoutParams.height;</div><div class="line">            lastChildHeight = layoutParams.height;</div><div class="line">        &#125;</div><div class="line">        maxDistance = top - lastChildHeight;</div><div class="line">        totalHeight = top;</div><div class="line">        <span class="comment">//viewGroup.layout(l, t, r, top);</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFinishInflate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onFinishInflate();</div><div class="line"></div><div class="line">        nestedScrollingChildList.clear();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getChildCount(); i++) &#123;</div><div class="line">            View child =  getChildAt(i);</div><div class="line">            nestedScrollingChildList.add(child);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consumeEvent</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span>[] consumed)</span> </span>&#123;</div><div class="line">        scrollBy(dx, dy);</div><div class="line">        consumed[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        consumed[<span class="number">1</span>] = dy;</div><div class="line">        log(<span class="string">"parent consumed pre : "</span> + consumed[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentWrapline</span><span class="params">(View target)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> line = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (View view : nestedScrollingChildList) &#123;</div><div class="line">            <span class="keyword">if</span> (view == target) &#123;</div><div class="line">                <span class="keyword">return</span> line;</div><div class="line">            &#125;</div><div class="line">            line += view.getHeight();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> line;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(View child, View target, <span class="keyword">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (nestedScrollAxes &amp; SCROLL_AXIS_VERTICAL) != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScrollAccepted</span><span class="params">(View child, View target, <span class="keyword">int</span> axes)</span> </span>&#123;</div><div class="line">        mParentHelper.onNestedScrollAccepted(child, target, axes);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedPreScroll</span><span class="params">(View target, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span>[] consumed)</span> </span>&#123;</div><div class="line">        logi(<span class="string">"======== onStartNestedScroll ======="</span>);</div><div class="line">        <span class="keyword">int</span> scrollY = getScrollY();</div><div class="line">        <span class="keyword">int</span> line = getCurrentWrapline(target);</div><div class="line">        <span class="keyword">boolean</span> targetScrollDown = ScrollUtils.canChildScrollDown(target);</div><div class="line">        <span class="keyword">boolean</span> targetScrollUp = ScrollUtils.canChildScrollUp(target);</div><div class="line">        log(<span class="string">"onNestedPreScroll: target = ["</span> + target.getClass().getName() + <span class="string">"], dx = ["</span> + dx + <span class="string">"], dy = ["</span> + dy + <span class="string">"], consumed = ["</span> + consumed + <span class="string">"]"</span>);</div><div class="line">        log(<span class="string">"scrollY:"</span> + scrollY + <span class="string">",lien:"</span> + line + <span class="string">",scrollDown:"</span> + targetScrollDown + <span class="string">"scrollUp:"</span> + targetScrollUp + <span class="string">",maxDistance"</span> + maxDistance);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (scrollY == line</div><div class="line">                &amp;&amp; ((dy &gt; <span class="number">0</span> &amp;&amp; targetScrollDown) || (dy &lt; <span class="number">0</span> &amp;&amp; targetScrollUp))) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (scrollY + dy &lt; <span class="number">0</span> || scrollY + dy &gt; maxDistance) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        consumeEvent(<span class="number">0</span>, dy, consumed);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(View target, <span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed, <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> scrollY = getScrollY();</div><div class="line">        <span class="keyword">if</span> (scrollY + dyUnconsumed &lt; <span class="number">0</span> || scrollY + dyUnconsumed &gt; maxDistance) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        scrollBy(dxUnconsumed, dyUnconsumed);</div><div class="line">        log(<span class="string">"onNestedScroll: target = ["</span> + target.getClass().getName() + <span class="string">"], dxConsumed = ["</span> + dxConsumed + <span class="string">"], dyConsumed = ["</span> + dyConsumed + <span class="string">"], dxUnconsumed = ["</span> + dxUnconsumed + <span class="string">"], dyUnconsumed = ["</span> + dyUnconsumed + <span class="string">"]"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNestedPreFling</span><span class="params">(View target, <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> scrollY = getScrollY();</div><div class="line">        log(<span class="string">"onNestedPreFling: target = ["</span> + target.getClass().getName() + <span class="string">"], velocityX = ["</span> + velocityX + <span class="string">"], velocityY = ["</span> + velocityY + <span class="string">"]"</span> + <span class="string">",scrollY:"</span> + scrollY);</div><div class="line">        <span class="keyword">int</span> line = getCurrentWrapline(target);</div><div class="line">        <span class="keyword">if</span> (scrollY != line) &#123;</div><div class="line">            fling((<span class="keyword">int</span>) velocityY, scrollY);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fling</span><span class="params">(<span class="keyword">int</span> velocityY, <span class="keyword">int</span> scrollY)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getChildCount() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> height = getHeight() - getPaddingTop() - getPaddingBottom();</div><div class="line">            <span class="keyword">int</span> bottom = totalHeight;</div><div class="line">            scroller.fling(<span class="number">0</span>, scrollY, <span class="number">0</span>, velocityY, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">                    Math.max(<span class="number">0</span>, bottom - height));</div><div class="line">            invalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (scroller.computeScrollOffset()) &#123;</div><div class="line">            <span class="keyword">int</span> y = scroller.getCurrY();</div><div class="line">            scrollTo(<span class="number">0</span>, y);</div><div class="line">            invalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNestedFling</span><span class="params">(View target, <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY, <span class="keyword">boolean</span> consumed)</span> </span>&#123;</div><div class="line">        log(<span class="string">"onNestedFling: target = ["</span> + target.getClass().getName() + <span class="string">"], velocityX = ["</span> + velocityX + <span class="string">"], velocityY = ["</span> + velocityY + <span class="string">"], consumed = ["</span> + consumed + <span class="string">"]"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopNestedScroll</span><span class="params">(View target)</span> </span>&#123;</div><div class="line">        logi(<span class="string">"======== onStopNestedScroll ======="</span>);</div><div class="line">        mParentHelper.onStopNestedScroll(target);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.e(TAG, s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logi</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.i(TAG, s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logw</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.w(TAG, s);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>文章来自： <a href="http://hanks.pub">http://hanks.pub</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最终效果：&lt;br&gt;上下排列 3 个 view， 依次为 RecyclerView ，NestedScrollView，RecyclerView，规则：子 View 可以滚动时 Touch 事件给子 view 消费，否则给父布局。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/8c9b876fjw1f7asx0kp5rg20b40jlx6s.gif&quot; alt=&quot;img&quot; width=&quot;240&quot; height=&quot;427&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://hanks.pub/tags/Android/"/>
    
      <category term="NestedScrolling" scheme="http://hanks.pub/tags/NestedScrolling/"/>
    
  </entry>
  
  <entry>
    <title>写一个福利 Telegram 机器人</title>
    <link href="http://hanks.pub/2016/08/04/telegram-bot/"/>
    <id>http://hanks.pub/2016/08/04/telegram-bot/</id>
    <published>2016-08-04T01:58:03.000Z</published>
    <updated>2017-07-10T11:02:58.265Z</updated>
    
    <content type="html"><![CDATA[<p>利用 Telegram 提供的 API 写一机器人，通过发送指令来执行一些任务。<br><a id="more"></a></p>
<p><img src="http://ww1.sinaimg.cn/large/8c9b876fjw1f6gyh0y6l8j20k00zktb8.jpg" alt="img" width="240" height="427"></p>
<p><a href="https://core.telegram.org/bots/api" target="_blank" rel="external">官网</a></p>
<h2 id="创建-bot"><a href="#创建-bot" class="headerlink" title="创建 bot"></a>创建 bot</h2><p>根据文档，在 telegram 里面添加 <a href="https://telegram.me/botfather" target="_blank" rel="external">@BotFather</a>, 然后跟他聊天来创建机器人</p>
<p><img src="http://ww2.sinaimg.cn/large/8c9b876fjw1f6gyodg5q4j20k00zk782.jpg" alt=""></p>
<p>拿到 <code>token</code></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在浏览器中（翻墙）输入 <code>https://api.telegram.org/botYOU_TOKEN/getMe</code> 测试：<br>返回如下格式，说明成功。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"ok"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"result"</span>: &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="number">249208551</span>,</div><div class="line">        <span class="attr">"first_name"</span>: <span class="string">"LinuxC"</span>,</div><div class="line">        <span class="attr">"username"</span>: <span class="string">"LinuxC_bot"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="编写-api"><a href="#编写-api" class="headerlink" title="编写 api"></a>编写 api</h2><p>我使用的 node 写的， 参考 <a href="https://github.com/Naltox/telegram-node-bot" target="_blank" rel="external">telegram-node-bot</a></p>
<p>首先安装 <code>telegram-node-bot</code></p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save telegram-<span class="keyword">node</span><span class="title">-bot</span></div></pre></td></tr></table></figure>
<p>然后创建 app.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> api = <span class="built_in">require</span>(<span class="string">'./api'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> Telegram = <span class="built_in">require</span>(<span class="string">'telegram-node-bot'</span>)</div><div class="line"><span class="keyword">const</span> TelegramBaseController = Telegram.TelegramBaseController</div><div class="line"><span class="keyword">const</span> tg = <span class="keyword">new</span> Telegram.Telegram(<span class="string">'YOU_TOKEN'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PingController</span> <span class="keyword">extends</span> <span class="title">TelegramBaseController</span></span>&#123;</div><div class="line">    pingHandler($)&#123;</div><div class="line">        api.getMZ(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">            $.sendMessage(data)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    get routes()&#123;</div><div class="line">        <span class="keyword">return</span> &#123; <span class="string">'ping'</span>:<span class="string">'pingHandler'</span>&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">tg.router</div><div class="line">  .when([<span class="string">'ping'</span>],<span class="keyword">new</span> PingController())</div></pre></td></tr></table></figure>
<p>抓取图片的 <code>api.js</code>, 抓取图片可以参考前面的文章 <a href="http://hanks.xyz/2016/05/26/node-spider/" target="_blank" rel="external">Node.js 爬微信文章</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta"></span></div><div class="line">'use strict'</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> url = <span class="string">'http://www.kmeitu.com/'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPicture</span>(<span class="params">html</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> array = []</div><div class="line">    <span class="keyword">var</span> $ = cheerio.load(html)</div><div class="line">    <span class="keyword">var</span> items = $(<span class="string">'.lz-img'</span>)</div><div class="line">    items.each(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> url = $(<span class="keyword">this</span>).attr(<span class="string">'data-src'</span>).replace(<span class="regexp">/\s+/g</span>, <span class="string">''</span>)</div><div class="line">        array.push(url)</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> array[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*array.length)]</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.getMZ = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">    http.get(url, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> html = <span class="string">''</span></div><div class="line">        res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">            html += data</div><div class="line">        &#125;)</div><div class="line">        res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">//console.log(html)</span></div><div class="line">            <span class="keyword">var</span> array = getPicture(html)</div><div class="line">            callback(array)</div><div class="line">        &#125;)</div><div class="line">    &#125;).on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'get html error'</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后运行 <code>node app.js</code> 即可<br>注意点： 全程需要 FQ（跟 telegram 连接用）， <code>app.js</code> 方法服务器运行（我使用的 <code>pm2</code> ）。</p>
<blockquote>
<p>文章来自： <a href="http://hanks.pub">http://hanks.pub</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用 Telegram 提供的 API 写一机器人，通过发送指令来执行一些任务。&lt;br&gt;
    
    </summary>
    
    
      <category term="Telegram" scheme="http://hanks.pub/tags/Telegram/"/>
    
  </entry>
  
  <entry>
    <title>写一个 ButterKnife</title>
    <link href="http://hanks.pub/2016/07/31/write-butterkinfe/"/>
    <id>http://hanks.pub/2016/07/31/write-butterkinfe/</id>
    <published>2016-07-30T19:07:03.000Z</published>
    <updated>2017-07-10T11:02:58.306Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="external">ButterKnife</a> 很多人都用过，能节省很多代码，最多的就是省去了很多 <code>findViewById</code> 语句。接下来自己写一个，就叫 <code>BBKnife</code> 吧。</p>
<a id="more"></a>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在使用 ButterKnife 时，需要书写下面的类似代码，以一个 Activity 为例</p>
<p><code>ExampleActivity.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">  <span class="meta">@BindView</span>(R.id.title) TextView title;</div><div class="line">  <span class="meta">@BindView</span>(R.id.subtitle) TextView subtitle;</div><div class="line">  <span class="meta">@BindView</span>(R.id.footer) TextView footer;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.simple_activity);</div><div class="line">    ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">// TODO Use fields...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在编译后，会自动生成一个和 Activity 同名的 <code>ExampleActivity$ViewBinder</code> 的辅助类文件，并且生成 findViewById 相关的代码</p>
<p><code>ExampleActivity$ViewBinder.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(ExampleActivity activity)</span> </span>&#123;</div><div class="line">  activity.subtitle = (android.widget.TextView) activity.findViewById(<span class="number">2130968578</span>);</div><div class="line">  activity.footer = (android.widget.TextView) activity.findViewById(<span class="number">2130968579</span>);</div><div class="line">  activity.title = (android.widget.TextView) activity.findViewById(<span class="number">2130968577</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么 <code>BBKnife</code> 库要做的事情就很清楚了，生成辅助类。</p>
<h2 id="动手开写"><a href="#动手开写" class="headerlink" title="动手开写"></a>动手开写</h2><p>步骤：</p>
<ol>
<li>创建注解</li>
<li>编译期间处理注解</li>
<li>生成辅助类</li>
<li>调用辅助类</li>
</ol>
<h3 id="0x00-创建工程"><a href="#0x00-创建工程" class="headerlink" title="0x00 创建工程"></a>0x00 创建工程</h3><p>首先创建一个新的工程</p>
<p><img src="http://ww2.sinaimg.cn/large/8c9b876fjw1f6ch0o8ai8j20fq09g74z.jpg" alt=""></p>
<p>然后创建一个 module ， 选择 java Library。</p>
<p><img src="http://ww2.sinaimg.cn/large/8c9b876fjw1f6ch5zk9suj20g20ixt9p.jpg" alt=""></p>
<p><img src="http://ww3.sinaimg.cn/large/8c9b876fjw1f6ch7emf5sj20700gnaba.jpg" alt=""></p>
<h3 id="0x01-创建注解"><a href="#0x01-创建注解" class="headerlink" title="0x01 创建注解"></a>0x01 创建注解</h3><p>这个注解作用于类的属性上面，包含一个整型的参数，类似于 <code>@BindView(R.id.title)</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by hanks on 2016/7/31.</div><div class="line"> */</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindView &#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="0x02-编译期间处理注解-amp-amp-生成辅助类"><a href="#0x02-编译期间处理注解-amp-amp-生成辅助类" class="headerlink" title="0x02 编译期间处理注解 &amp;&amp; 生成辅助类"></a>0x02 编译期间处理注解 &amp;&amp; 生成辅助类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 编译期间处理注解</div><div class="line"> * Created by hanks on 2016/7/31.</div><div class="line"> */</div><div class="line"><span class="meta">@SupportedAnnotationTypes</span>(<span class="string">"xyz.hanks.BindView"</span>)</div><div class="line"><span class="meta">@SupportedSourceVersion</span>(SourceVersion.RELEASE_7)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindViewProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Messager messager;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUFFIX = <span class="string">"$ViewBinder"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.init(processingEnv);</div><div class="line">        messager = processingEnv.getMessager();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</div><div class="line">        Map&lt;String, List&lt;VariableElement&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// key 是类名，value 是该类的注解元素</span></div><div class="line">        <span class="comment">// 遍历 BindView 注解的所有元素</span></div><div class="line">        <span class="keyword">for</span> (Element element : roundEnv.getElementsAnnotatedWith(BindView.class)) &#123;</div><div class="line">            <span class="keyword">if</span> (element == <span class="keyword">null</span> || !(element <span class="keyword">instanceof</span> VariableElement)) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 给属性添加的注解</span></div><div class="line">            VariableElement variableElement = (VariableElement) element;</div><div class="line">            <span class="comment">// 获取属性所在的类名</span></div><div class="line">            String className = element.getEnclosingElement().getSimpleName().toString();</div><div class="line">            List&lt;VariableElement&gt; variableElementList = map.get(className);</div><div class="line">            <span class="keyword">if</span> (variableElementList == <span class="keyword">null</span>) &#123;</div><div class="line">                variableElementList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                map.put(className, variableElementList);</div><div class="line">            &#125;</div><div class="line">            variableElementList.add(variableElement);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 生成辅助类</span></div><div class="line">        generate(map);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generate</span><span class="params">(Map&lt;String, List&lt;VariableElement&gt;&gt; map)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == map || map.size() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (String className : map.keySet()) &#123;</div><div class="line">            List&lt;VariableElement&gt; variableElementList = map.get(className);</div><div class="line">            <span class="keyword">if</span> (variableElementList == <span class="keyword">null</span> || variableElementList.size() &lt;= <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 获取包名</span></div><div class="line">            String packageName = variableElementList.get(<span class="number">0</span>).getEnclosingElement().getEnclosingElement().toString();</div><div class="line">            StringBuilder builder = <span class="keyword">new</span> StringBuilder()</div><div class="line">                    .append(<span class="string">"package "</span>).append(packageName).append(<span class="string">";\n\n"</span>)</div><div class="line">                    .append(<span class="string">"public class "</span>).append(className).append(SUFFIX).append(<span class="string">"&#123;\n"</span>) <span class="comment">// open class</span></div><div class="line">                    .append(<span class="string">"    public void bind(Object target) &#123;\n"</span>)</div><div class="line">                    .append(<span class="string">"        "</span>).append(className).append(<span class="string">" activity = ("</span>).append(className).append(<span class="string">")target;\n"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (VariableElement variableElement : variableElementList) &#123;</div><div class="line">                BindView bindView = variableElement.getAnnotation(BindView.class);</div><div class="line">                log(bindView.toString());</div><div class="line">                builder.append(<span class="string">"        activity."</span>).append(variableElement.getSimpleName().toString()).append(<span class="string">"=("</span>).append(variableElement.asType()).append(<span class="string">")activity.findViewById("</span>).append(bindView.value()).append(<span class="string">");\n"</span>);</div><div class="line">            &#125;</div><div class="line">            builder.append(<span class="string">"    &#125;\n&#125;\n"</span>);</div><div class="line">            <span class="comment">// write the file</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                String bindViewClassName = packageName + <span class="string">"."</span> + className + SUFFIX;</div><div class="line">                JavaFileObject source = processingEnv.getFiler().createSourceFile(bindViewClassName);</div><div class="line">                Writer writer = source.openWriter();</div><div class="line">                writer.write(builder.toString());</div><div class="line">                writer.flush();</div><div class="line">                writer.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                log(e.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        messager.printMessage(Diagnostic.Kind.WARNING, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意点：</p>
<ul>
<li>添加 <code>@SupportedAnnotationTypes</code>  <code>@SupportedSourceVersion</code> 注解， 原因: AbstractProcessor 中做了相关校验（看 AbstractProcessor 源码）。</li>
<li>打印消息是由 <code>processingEnv.getMessager().printMessage</code> 或者输出日志文件，原因：编译期间做的处理，不能使用 System.out 或者 Log.i</li>
<li>处理注解的时候需要获取类名或者包名，需要注意获取的是全路径还是简单名称。</li>
<li>依照需要生成辅助类文件。</li>
</ul>
<p>在 main 下新建 resources &gt; META_INF &gt; services 目录，创建 javax.annotation.processing.Processor 文件，javac 会自动检查和读取 <code>javax.annotation.processing.Processor</code> 中的内容，并且注册 <code>BindViewProcessor</code> 作为注解处理器。<br><img src="http://ww3.sinaimg.cn/large/8c9b876fjw1f6ciagzi37j20c6074jrv.jpg" alt=""></p>
<p><img src="http://ww3.sinaimg.cn/large/8c9b876fjw1f6cib9hm97j20by025t8t.jpg" alt=""></p>
<h3 id="0x03-调用辅助类"><a href="#0x03-调用辅助类" class="headerlink" title="0x03 调用辅助类"></a>0x03 调用辅助类</h3><p>当执行 <code>BBKnife.bind(activity)</code> 的时候调用我们生成的辅助类，辅助类内部进行 <code>findViewById</code> 从而进行注入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BBKnife</span> </span>&#123;</div><div class="line">    <span class="comment">// 调用我们生成的辅助类</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Object view)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String cla = view.getClass().getName()+BindViewProcessor.SUFFIX;</div><div class="line">            Class clazz = Class.forName(cla);</div><div class="line">            Object instance = clazz.newInstance();</div><div class="line">            Method bind = clazz.getMethod(<span class="string">"bind"</span>,Object.class);</div><div class="line">            bind.invoke(instance,view);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="导出-bbknife-jar"><a href="#导出-bbknife-jar" class="headerlink" title="导出 bbknife.jar"></a>导出 bbknife.jar</h3><p>在 build/libs 目录下有自动导出的 jar 文件， </p>
<p><img src="http://ww3.sinaimg.cn/large/8c9b876fjw1f6cihkdt83j20ch0b8js9.jpg" alt=""></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>复制到 app  下的 libs 进行引用。</p>
<p><img src="http://ww1.sinaimg.cn/large/8c9b876fjw1f6ciom1hxfj20bi09zt9e.jpg" alt=""></p>
<p>app 下的 build.gradle<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'com.neenbedankt.android-apt'</span> <span class="comment">// 使用 apt</span></div><div class="line"></div><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">classpath</span> <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span> <span class="comment">// 添加引用</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">24</span></div><div class="line">    buildToolsVersion <span class="string">"24.0.1"</span></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"xyz.hanks.bbknifeproject"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">24</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled <span class="keyword">false</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 设置java 版本</span></div><div class="line">    compileOptions&#123;</div><div class="line">        <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_7</div><div class="line">        <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_7</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:24.1.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在 MainActivity 使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@BindView</span>(R.id.bb_button) Button mButton;</div><div class="line">    <span class="meta">@BindView</span>(R.id.bb_image)  ImageView mImage;</div><div class="line">    <span class="meta">@BindView</span>(R.id.bb_text)   TextView mText;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        BBKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mButton.setText(<span class="string">"hanks.xyz"</span>);</div><div class="line">        mText.setText(<span class="string">"hanks.xyz"</span>);</div><div class="line">        mImage.setImageResource(R.mipmap.ic_launcher);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看最后生成的辅助类 <code>MainActivity$ViewBinder.java</code><br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span>$<span class="title">ViewBinder</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">bind</span><span class="params">(Object <span class="keyword">target</span>)</span> </span>&#123;</div><div class="line">        MainActivity activity = (MainActivity)<span class="keyword">target</span>;</div><div class="line">        activity.mButton=(android.widget.Button)activity.findViewById(<span class="number">2131427412</span>);</div><div class="line">        activity.mImage=(android.widget.ImageView)activity.findViewById(<span class="number">2131427414</span>);</div><div class="line">        activity.mText=(android.widget.TextView)activity.findViewById(<span class="number">2131427413</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://ww3.sinaimg.cn/large/8c9b876fjw1f6citq0ptdj20bu0l2dg4.jpg" alt=""></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.stablekernel.com/the-10-step-guide-to-annotation-processing-in-android-studio" target="_blank" rel="external">http://blog.stablekernel.com/the-10-step-guide-to-annotation-processing-in-android-studio
</a></p>
<blockquote>
<p>文章来自： <a href="http://hanks.pub">http://hanks.pub</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://jakewharton.github.io/butterknife/&quot;&gt;ButterKnife&lt;/a&gt; 很多人都用过，能节省很多代码，最多的就是省去了很多 &lt;code&gt;findViewById&lt;/code&gt; 语句。接下来自己写一个，就叫 &lt;code&gt;BBKnife&lt;/code&gt; 吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://hanks.pub/tags/Android/"/>
    
      <category term="依赖注入" scheme="http://hanks.pub/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>多行 EditText 的光标高度问题</title>
    <link href="http://hanks.pub/2016/07/24/edittext-cursor/"/>
    <id>http://hanks.pub/2016/07/24/edittext-cursor/</id>
    <published>2016-07-24T15:23:12.000Z</published>
    <updated>2017-07-10T11:02:58.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>改变文本的行间距需要给 <code>EditText</code> 设置 <code>lineSpacingExtra</code> 和 <code>lineSpacingMultiplier</code> 这个时候的 <code>EditText</code>的光标高度就会变得很难看.<br><a id="more"></a><br><img src="http://ww3.sinaimg.cn/large/8c9b876fjw1f65febqq97j20bm082dge.jpg" alt="默认效果"></p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>自定义 <code>cursorDrawable</code> 然后设置 <code>padding</code> 值</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>EditText</code> 在更新光标的视图的时候检查了光标 drawable 的 padding. 计算光标高度会算上相应的值.</p>
<p>相关源码:</p>
<p><code>Editor.java</code></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">updateCursorPosition</span><span class="params">(<span class="keyword">int</span> cursorIndex, <span class="keyword">int</span> top, <span class="keyword">int</span> bottom, <span class="keyword">float</span> horizontal)</span> </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mTempRect == <span class="keyword">null</span>) mTempRect = <span class="keyword">new</span> Rect();</div><div class="line">    mCursorDrawable[cursorIndex].getPadding(mTempRect); <span class="comment">//光标的 padding</span></div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="comment">// 上下边距的最终值为 top - mTempRect.top 和 bottom + mTempRect.bottom</span></div><div class="line">    mCursorDrawable[cursorIndex].setBounds(left, top - mTempRect.top, left + width,</div><div class="line">            bottom + mTempRect.bottom);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么 top 和 bottom 的值是多少 ?</p>
<p><code>Editor.java</code><br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="type">void</span> updateCursorsPositions() &#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line"></div><div class="line">    Layout <span class="keyword">layout</span> = mTextView.getLayout();</div><div class="line">    Layout hintLayout = mTextView.getHintLayout();</div><div class="line">    final <span class="type">int</span> <span class="keyword">offset</span> = mTextView.getSelectionStart();</div><div class="line">    final <span class="type">int</span> line = <span class="keyword">layout</span>.getLineForOffset(<span class="keyword">offset</span>); <span class="comment">// 算出当前是第几行</span></div><div class="line">    final <span class="type">int</span> top = <span class="keyword">layout</span>.getLineTop(line); <span class="comment">// 算出第 line 行的顶部坐标</span></div><div class="line">    final <span class="type">int</span> bottom = <span class="keyword">layout</span>.getLineTop(line + <span class="number">1</span>); <span class="comment">// 算出第 line+1 行的顶部坐标</span></div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    boolean clamped = <span class="keyword">layout</span>.shouldClampCursor(line);</div><div class="line">    updateCursorPosition(<span class="number">0</span>, top, middle,</div><div class="line">            getPrimaryHorizontal(<span class="keyword">layout</span>, hintLayout, <span class="keyword">offset</span>, clamped));</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从源码看出 bottom 到 top 的距离为第 line 行的顶部到第 line+1 行的顶部. 也就是上面图中的效果.</p>
<p>解决方法:<br>自定义一个 <code>cursor.xml</code>, 然后设置 <code>android:textCursorDrawable=&quot;@drawable/cursor&quot;</code></p>
<p><code>cursor.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:shape</span>=<span class="string">"rectangle"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">size</span></span></div><div class="line">        <span class="attr">android:width</span>=<span class="string">"2dip"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">solid</span></span></div><div class="line">        <span class="attr">android:color</span>=<span class="string">"#f00"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">padding</span></span></div><div class="line">        <span class="attr">android:top</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:bottom</span>=<span class="string">"-22dp"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>注意上面设置了 shape 的 <code>padding</code> 计算出来 <code>bottom = 行高 - 文字高度 = 42 - 20 = 22</code>.当然这值是可以自己调整的.</p>
<p><img src="http://ww1.sinaimg.cn/large/8c9b876fjw1f65fgftcsij20bi06u74r.jpg" alt="设置后效果"></p>
<blockquote>
<p>文章来自： <a href="http://hanks.pub">http://hanks.pub</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;改变文本的行间距需要给 &lt;code&gt;EditText&lt;/code&gt; 设置 &lt;code&gt;lineSpacingExtra&lt;/code&gt; 和 &lt;code&gt;lineSpacingMultiplier&lt;/code&gt; 这个时候的 &lt;code&gt;EditText&lt;/code&gt;的光标高度就会变得很难看.&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://hanks.pub/tags/Android/"/>
    
      <category term="EditText" scheme="http://hanks.pub/tags/EditText/"/>
    
  </entry>
  
  <entry>
    <title>TextView 设置行高并垂直居中</title>
    <link href="http://hanks.pub/2016/07/22/textview-lineheight/"/>
    <id>http://hanks.pub/2016/07/22/textview-lineheight/</id>
    <published>2016-07-22T13:49:04.000Z</published>
    <updated>2017-07-10T11:02:58.271Z</updated>
    
    <content type="html"><![CDATA[<p><strong>需求</strong>： TextView 多行文本可以设置行高（如20dp），每行文本垂直居中。</p>
<p>效果如下：</p>
<p><img src="http://ww4.sinaimg.cn/large/8c9b876fjw1f61ytzwj8ej20bt09sjs2.jpg" alt="多行文本,设置行高,垂直居中"><br><a id="more"></a></p>
<p><strong>实现思路</strong>：通过设置 TextView 的 <code>lineSpacingExtra</code> 和 <code>lineSpacingMultiplier</code> 来实现。</p>
<ul>
<li><code>lineSpacingMultiplier</code> 的值为行间距的倍数，默认值为 1.0f。</li>
<li><code>lineSpacingExtra</code> 值为具体的行间距值，如20dp。</li>
<li>垂直居中靠设置 paddingTop 和 paddingBottom</li>
</ul>
<h3 id="TextView-相关"><a href="#TextView-相关" class="headerlink" title="TextView 相关"></a>TextView 相关</h3><p>TextView 内部除了继承自 View 的相关属性和 <code>measure、layout、draw</code>步骤，还包括：</p>
<ul>
<li><strong>Layout</strong>: TextView 的文字排版、折行策略以及文本绘制都是在 Layout 里面完成的，TextView 的自身测量也受 Layout 的影响。Layout 是 TextView 执行setText方法后，由 TextView 内部创建的实例，并不能由外部提供。Layout有三个子类，BoringLayout、DynamicLayout、StaticLayout。</li>
<li><strong>TransformationMethod</strong>: 用来处理最终的显示结果的类，例如显示密码的时候把密码转换成圆点。这个类并不直接影响 TextView 内部储存的 Text ，只影响显示的结果。</li>
<li><strong>MovementMethod</strong>: 用来处理 TextView 内部事件响应的类，可以针 对TextView 内文本的某一个区域做软键盘输入或者触摸事件的响应。</li>
<li><strong>Drawables</strong>: TextView 的静态内部类，用来处理和储存 TextView 的 CompoundDrawables ，包括 TextView 的上下左右的 Drawable 以及错误提示的 Drawable。</li>
<li><strong>Spans</strong>: Spans 并不是特定的某一个类或者实现了某一个接口的类。它可以是任意类型，Spans实际上做的事情是在 TextView 的内部的 text 的某一个区域做标记。其中有部 分Spans 可以影响TextView的绘制和测量，如 ImageSpan、BackgroundColorSpan、AbsoluteSizeSpan。还有可以响应点击事件的ClickableSpan。</li>
<li><strong>Editor</strong>: TextView作为可编辑文本控件的时候(EditText)，使用Editor来处理文本的区域选择处理和判断、拼写检查、弹出文本菜单等。</li>
<li><strong>InputConnection</strong>: EditText 的文本输入部分是在 TextView 中完成的。而 InputConnection 是软键盘和TextView之间的桥梁，所有的软键盘的输入文字、修改文字和删除文字都是通过 InputConnection 传递给 TextView 的。</li>
</ul>
<h3 id="TextView-默认文字的上下边距"><a href="#TextView-默认文字的上下边距" class="headerlink" title="TextView 默认文字的上下边距"></a>TextView 默认文字的上下边距</h3><p>TextView 的 <code>textSize</code> 属性代表的意义是字体的大小，体现为字体高度,一般单位是 sp， sp 代表的字体大小根据手机设置的文字大小有关，默认的 <code>1sp = 1dp</code>。但是Android 系统会默认的给文字增加一点边框。<br><img src="http://ww4.sinaimg.cn/large/8c9b876fjw1f62r61rhp5j20m706k75j.jpg" alt="默认效果"></p>
<p><img src="http://ww4.sinaimg.cn/large/8c9b876fjw1f62rzmn4gvj20al04jmxe.jpg" alt="渲染图"></p>
<p>Android 提供了一个 setIncludeFontPadding 方法.用来设置 TextView 是否在顶部和底部保留一些空隙,默认为 ture 。如果我们设置为 false 的话可能会导致某些语言显示的不完整, 如 Arabic Kannada 。在 <code>StaticLayout</code> 的 <code>setIncludePad</code> 方法提到。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Set whether <span class="keyword">to</span> include extra <span class="literal">space</span> beyond font ascent <span class="keyword">and</span> descent (which <span class="keyword">is</span></div><div class="line"> * needed <span class="keyword">to</span> avoid clipping <span class="keyword">in</span> <span class="keyword">some</span> languages, such <span class="keyword">as</span> Arabic <span class="keyword">and</span> Kannada). The</div><div class="line"> * default <span class="keyword">is</span> &#123;@code <span class="literal">true</span>&#125;.</div><div class="line"> *</div><div class="line"> * @param includePad whether <span class="keyword">to</span> include padding</div><div class="line"> * @<span class="literal">return</span> this builder, useful <span class="keyword">for</span> chaining</div><div class="line"> * @see android.widget.TextView<span class="comment">#setIncludeFontPadding</span></div><div class="line"> */</div><div class="line">public Builder setIncludePad(<span class="built_in">boolean</span> includePad) &#123;</div><div class="line">    mIncludePad = includePad;</div><div class="line"><span class="built_in">    return</span> this;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过 <code>android:includeFontPadding=&quot;false&quot;</code> 可以去掉一定的边距值但是不能完全去掉。还少达不到<br>文字高度精确，所以不通过过设置 lineSpacingMultiplier 来改变, lineSpacingMultiplier 为 0 , 那么多行文本就都变成一行了。<br><img src="http://ww1.sinaimg.cn/large/8c9b876fjw1f62nk9xof1j20v009q416.jpg" alt="右边的绿色背景的效果"></p>
<p>最终结果是：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">lineSpacingMultiplier</span> = <span class="number">0</span></div><div class="line"><span class="attr">lineSpacingExtra</span> = 行高</div><div class="line"><span class="attr">paddingTop</span> = paddingBottom = （行高-字体大小）* <span class="number">0.5</span></div></pre></td></tr></table></figure>
<p><img src="http://ww2.sinaimg.cn/large/8c9b876fjw1f62nc6ai84j20bt09s0tl.jpg" alt="计算paddingTop"></p>
<p><img src="http://ww4.sinaimg.cn/large/8c9b876fjw1f61yuqmw9aj214l0lsqbe.jpg" alt="设置高度"></p>
<p>封装成控件。这里继承了EditText, 默认的编辑文本时的行高会改变,所以在文本变化时需要重新设置.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> xyz.hanks.note.ui.widget;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.text.Editable;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.Gravity;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"></div><div class="line"><span class="keyword">import</span> xyz.hanks.note.R;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 每一行的文字垂直居中</div><div class="line"> * Created by hanks on 16/7/2.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineTextView</span> <span class="keyword">extends</span> <span class="title">EditText</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> ITEM_HEIGHT = <span class="number">125</span>;</div><div class="line">    <span class="keyword">boolean</span> reLayout = <span class="keyword">false</span>;</div><div class="line">    TextWatcher textWatcher;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LineTextView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context,<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LineTextView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LineTextView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        addTextChangedListener(<span class="keyword">new</span> android.text.TextWatcher() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence charSequence, <span class="keyword">int</span> i, <span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (textWatcher != <span class="keyword">null</span>) &#123;</div><div class="line">                    textWatcher.beforeTextChanged(charSequence, i, i1, i2);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence charSequence, <span class="keyword">int</span> i, <span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span> </span>&#123;</div><div class="line">                <span class="keyword">float</span> add = ITEM_HEIGHT;</div><div class="line">                setLineSpacing(<span class="number">0f</span>, <span class="number">1f</span>);</div><div class="line">                setLineSpacing(add, <span class="number">0</span>);</div><div class="line">                setIncludeFontPadding(<span class="keyword">false</span>);</div><div class="line">                setGravity(Gravity.CENTER_VERTICAL);</div><div class="line">                <span class="keyword">int</span> top = (<span class="keyword">int</span>) ((add - getTextSize()) * <span class="number">0.5f</span>);</div><div class="line">                setPadding(getPaddingLeft(), top, getPaddingRight(), -top);</div><div class="line">                <span class="keyword">if</span> (textWatcher != <span class="keyword">null</span>) &#123;</div><div class="line">                    textWatcher.onTextChanged(charSequence, i, i1, i2);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable editable)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (textWatcher != <span class="keyword">null</span>) &#123;</div><div class="line">                    textWatcher.afterTextChanged(editable);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        <span class="keyword">if</span> (!reLayout) &#123;</div><div class="line">            reLayout = <span class="keyword">true</span>;</div><div class="line">            setIncludeFontPadding(<span class="keyword">false</span>);</div><div class="line">            setGravity(Gravity.CENTER_VERTICAL);</div><div class="line">            setLineSpacing(ITEM_HEIGHT, <span class="number">0</span>);</div><div class="line">            <span class="keyword">int</span> top = (<span class="keyword">int</span>) ((ITEM_HEIGHT - getTextSize()) * <span class="number">0.5f</span>);</div><div class="line">            setPadding(getPaddingLeft(), top, getPaddingRight(), -top);</div><div class="line">            requestLayout();</div><div class="line">            invalidate();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTextWatcher</span><span class="params">(TextWatcher textWatcher)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.textWatcher = textWatcher;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TextWatcher</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence var1, <span class="keyword">int</span> var2, <span class="keyword">int</span> var3, <span class="keyword">int</span> var4)</span></span>;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence var1, <span class="keyword">int</span> var2, <span class="keyword">int</span> var3, <span class="keyword">int</span> var4)</span></span>;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable var1)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 参考链接:</p>
<p> <a href="https://github.com/7heaven/AndroidSdkSourceAnalysis/blob/master/article/textview%E6%BA%90%E7%A2%BC%E8%A7%A3%E6%9E%90.md" target="_blank" rel="external">TextView源码解析</a></p>
<p> <a href="http://www.cnblogs.com/tianzhijiexian/p/4297664.html" target="_blank" rel="external">用TextPaint来绘制文字</a></p>
<blockquote>
<p>文章来自： <a href="http://hanks.pub">http://hanks.pub</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;： TextView 多行文本可以设置行高（如20dp），每行文本垂直居中。&lt;/p&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/8c9b876fjw1f61ytzwj8ej20bt09sjs2.jpg&quot; alt=&quot;多行文本,设置行高,垂直居中&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="TextView" scheme="http://hanks.pub/tags/TextView/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试还可以用来干啥</title>
    <link href="http://hanks.pub/2016/07/07/auto-test/"/>
    <id>http://hanks.pub/2016/07/07/auto-test/</id>
    <published>2016-07-06T16:01:00.000Z</published>
    <updated>2017-07-10T11:02:57.993Z</updated>
    
    <content type="html"><![CDATA[<p>自动化测试就是把一些重复的测试工作利用相关工具自动化，减少重复的劳动。我们不仅可以利用自动化测试工具做测试，还可以利用这些工作做一些其他事情，比如爬数据，曾经抓取过学校的整个学期的课表，空闲教室，帮老爸抓取他的客户联系信息到 excel 表。这种工具不同于一般的脚本爬虫，这相当于正常的用户行为，比如点击输入框，输入文本，点击按钮，而且不用担心动态 js 等问题。</p>
<a id="more"></a>
<p>大概搜索了几个自动化测试的工具：<br><a href="http://www.seleniumhq.org/projects/webdriver/" target="_blank" rel="external">selenium</a><br><a href="http://casperjs.org/" target="_blank" rel="external">capserjs</a><br><a href="http://phantomjs.org/best-practices.html" target="_blank" rel="external">phantomjs</a><br><a href="https://launchpad.net/sikuli" target="_blank" rel="external">Sikuli</a><br><a href="http://zombie.js.org/" target="_blank" rel="external">Zombie </a><br><a href="http://watij.com/webspec-api/" target="_blank" rel="external">WebSpec</a></p>
<p>以前使用的 <code>WebSpec</code> ，支持多种浏览器内核，可开关 GUI。</p>
<p>下面了解了一下 <a href="https://www.npmjs.com/package/selenium-webdriver" target="_blank" rel="external">selenium-webdrive</a>,支持语言有 <code>java</code> <code>c#</code> <code>python</code> <code>ruby</code><br><code>php</code> <code>perl</code> <code>javascript</code>。</p>
<p>javascript 版安装很简单<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> selenium-webdriver</div></pre></td></tr></table></figure></p>
<p>这是自带的 firefox 版本的，其他浏览器的可以另行下载。</p>
<p>看官网的一个例子<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webdriver = <span class="keyword">require</span>(<span class="string">'selenium-webdriver'</span>), <span class="comment">// 引用模块</span></div><div class="line">    <span class="keyword">By</span> = webdriver.By,</div><div class="line">    <span class="keyword">until</span> = webdriver.until;</div><div class="line"></div><div class="line"><span class="keyword">var</span> driver = <span class="keyword">new</span> webdriver.Builder()</div><div class="line">    .forBrowser(<span class="string">'firefox'</span>) <span class="comment">// 打开 firfox </span></div><div class="line">    .build();</div><div class="line"></div><div class="line">driver.get(<span class="string">'http://www.google.com/ncr'</span>); <span class="comment">// 打开网页</span></div><div class="line">driver.findElement(<span class="keyword">By</span>.name(<span class="string">'q'</span>)).sendKeys(<span class="string">'webdriver'</span>); <span class="comment">// 获取输入框，并输入元素</span></div><div class="line">driver.findElement(<span class="keyword">By</span>.name(<span class="string">'btnG'</span>)).click(); <span class="comment">// 获取搜索按钮，并点击</span></div><div class="line">driver.wait(<span class="keyword">until</span>.titleIs(<span class="string">'webdriver - Google Search'</span>),  <span class="number">1000</span>); <span class="comment">// 等待网络响应直到网页标题变为webdriver - Google Search</span></div><div class="line">driver.quit();</div></pre></td></tr></table></figure></p>
<p>api 都简单易懂，很快就能入手使用。使用中遇到问题是 <code>driver.findElement</code> 有时会出现异常，原因是有的网页是后端动态渲染的，无法一下子获取到对应的元素，需要使用</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = driver.wait(<span class="keyword">until</span>.elementLocated(By.<span class="keyword">name</span>(<span class="string">'login'</span>)), <span class="number">5</span> * <span class="number">1000</span>)</div></pre></td></tr></table></figure>
<hr>
<p>计划用自动测试来自动运营微信公众号。大概流程如下（基本就是模拟用户行为）：</p>
<p>现在需要扫描二维码，那么就将二维码发送到手机然后微信识别登录。</p>
<ol>
<li>登录</li>
<li>获取二维码</li>
<li>点击群发消息</li>
<li>点击消息</li>
<li>编辑文章</li>
<li>发送</li>
<li>获取二维码</li>
<li>文章发布成功</li>
</ol>
<p>可以利用 slack 或者 telegram 机器人的 api 来通知自己（比如将验证码图片发送到手机）。</p>
<blockquote>
<p>文章来自： <a href="http://hanks.pub">http://hanks.pub</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化测试就是把一些重复的测试工作利用相关工具自动化，减少重复的劳动。我们不仅可以利用自动化测试工具做测试，还可以利用这些工作做一些其他事情，比如爬数据，曾经抓取过学校的整个学期的课表，空闲教室，帮老爸抓取他的客户联系信息到 excel 表。这种工具不同于一般的脚本爬虫，这相当于正常的用户行为，比如点击输入框，输入文本，点击按钮，而且不用担心动态 js 等问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="自动化" scheme="http://hanks.pub/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>学习 Promise （结合 RxJava）</title>
    <link href="http://hanks.pub/2016/06/26/promise-by-rx/"/>
    <id>http://hanks.pub/2016/06/26/promise-by-rx/</id>
    <published>2016-06-26T08:24:37.000Z</published>
    <updated>2017-03-27T02:05:42.423Z</updated>
    
    <content type="html"><![CDATA[<p>Promisse 解决回调嵌套问题。<br><a id="more"></a></p>
<h2 id="当前的问题"><a href="#当前的问题" class="headerlink" title="当前的问题"></a>当前的问题</h2><p>在开发过程中不同的语言都有遇到 callback hell（回调地狱）， 回调一般出现在异步操作中。<br>简单的例子:<br>① 从网络获取图片<br>② 将图片进行压缩<br>③ 压缩后的数据保存到本地<br>以上几个操作都属于异步操作，</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">op1(<span class="name">callback</span>()&#123;</div><div class="line">    success()&#123;</div><div class="line">        op2(<span class="name">callback</span>()&#123;</div><div class="line">            success()&#123;</div><div class="line">                op3(<span class="name">callback</span>()&#123;</div><div class="line">                    success()&#123;</div><div class="line">                     // done</div><div class="line">                    &#125;</div><div class="line">                    error(<span class="name">e</span>)&#123;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">            error(<span class="name">e</span>)&#123;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    error(<span class="name">e</span>)&#123;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>不同语言设计针对此都有对应的解决方案，将回调写成流水线，将复杂的操作变成一条线。</p>
<p><code>Rxjava</code>：java 中处理异步</p>
<p><code>Promise</code>： JavaScript 中处理异步</p>
<p>写起来类似于下面的代码：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">op1</span>()</div><div class="line">  <span class="selector-class">.then</span>(op2)</div><div class="line">  <span class="selector-class">.then</span>(op3)</div><div class="line">  <span class="selector-class">.catch</span>(e)</div><div class="line">  <span class="selector-class">.done</span>();</div></pre></td></tr></table></figure>
<p><code>Promise</code> 对象代表一个异步操作，有三种状态：<code>Pending</code>（进行中）、<code>Resolved</code>（已完成，又称Fulfilled）和 <code>Rejected</code>（已失败）。</p>
<h3 id="创建-promise"><a href="#创建-promise" class="headerlink" title="创建 promise"></a>创建 promise</h3><p><code>rxjava</code></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Observable</span> observable = Observable.create(new Observable.OnSubscribe&lt;<span class="keyword">String&gt;() </span>&#123;</div><div class="line">    <span class="comment">@Override</span></div><div class="line">    public void call(<span class="keyword">Subscriber&lt;? </span>super <span class="keyword">String&gt; </span><span class="keyword">subscriber) </span>&#123;</div><div class="line">      // ... some <span class="meta">code</span></div><div class="line">      <span class="meta">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</div><div class="line">        <span class="keyword">subscriber.onNext(value);</span></div><div class="line">        <span class="keyword">subscriber.onCompleted();</span></div><div class="line">      &#125; <span class="meta">else</span> &#123;</div><div class="line">        <span class="keyword">subscriber.onError(error);</span></div><div class="line">      &#125;</div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p><code>Promise</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="comment">// ... some code</span></div><div class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</div><div class="line">    resolve(value);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    reject(error);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h2><p><code>rxjava</code><br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">observable.doOnNext()</div><div class="line">    .map</div><div class="line">    .filter</div><div class="line">    .doOnNext()</div><div class="line">    .subscribe(</div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// ....</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(AppInfo appInfo)</span> </span>&#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line">    );</div></pre></td></tr></table></figure></p>
<p><code>promise</code></p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">promise.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></div><div class="line"></div><div class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></div><div class="line"></div><div class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(error)</span>&#123;</span></div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><p>类似于 <code>Observable ob  = Observable.merge(ob1,ob2,ob3)</code></p>
<p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">var</span> p = Promise.all([<span class="built_in">p1</span>, <span class="built_in">p2</span>, <span class="built_in">p3</span>])<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>上面代码中，<code>Promise.all</code> 方法接受一个数组作为参数，<code>p1、p2、p3</code> 都是Promise对象的实例。（Promise.all方法的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例。）</p>
<p>p的状态由p1、p2、p3决定，分成两种情况。</p>
<p>（1）只有<code>p1、p2、p3</code>的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p>
<p>（2）只要<code>p1、p2、p3</code>之中有一个被rejected，<code>p的状态就变成rejected</code>，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p>
<h3 id="race"><a href="#race" class="headerlink" title="race"></a>race</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">var</span> p = Promise.race([<span class="built_in">p1</span>,<span class="built_in">p2</span>,<span class="built_in">p3</span>])<span class="comment">;</span></div></pre></td></tr></table></figure>
<p><code>Promise.race</code> 方法同样是将多个Promise实例，包装成一个新的Promise实例。</p>
<p>上面代码中，只要<code>p1、p2、p3</code>之中有一个实例率先改变状态，<code>p的状态就跟着改变</code>。那个率先改变的Promise实例的返回值，就传递给p的回调函数。</p>
<h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>不管 <code>Promise</code> 对象最后状态如何，都会执行的操作 。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://es6.ruanyifeng.com/?search=fetch&amp;x=0&amp;y=0#docs/promise" target="_blank" rel="external">http://es6.ruanyifeng.com/?search=fetch&amp;x=0&amp;y=0#docs/promise</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Merge.html" target="_blank" rel="external">https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Merge.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Promisse 解决回调嵌套问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="Promise" scheme="http://hanks.pub/tags/Promise/"/>
    
      <category term="JavaScript" scheme="http://hanks.pub/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://hanks.pub/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>利用 Android 手机打造来电通知计划</title>
    <link href="http://hanks.pub/2016/06/21/motifyme/"/>
    <id>http://hanks.pub/2016/06/21/motifyme/</id>
    <published>2016-06-21T15:38:27.000Z</published>
    <updated>2017-07-10T11:02:58.200Z</updated>
    
    <content type="html"><![CDATA[<p>最近住的地方总在晚上停电，还让不让人活了，大热天的，于是就晚上在外面先找个凉快的地方呆着，但是来电的时间不确定，有时候感觉应该来电了，回去了还是没电，那个热啊。那么问题来了，要是屋里来电了有人告诉我就好了！于是计划写一个小程序让它在屋里来电后通知。<br><a id="more"></a><br>利用现用资源：一台<strong>退休的手机</strong><br>大概思路是这样的：家里的路由器是一直连着电源的，老手机是一直开着 wifi 的，来电后路由器通电，自动连接上网络，这个时候手机也检测到网络，连接上了 wifi，然后后台程序通过此判断来电了，再让老手机给我发短信通知，收到来电通知后我就可以回去了吹电扇了！</p>
<p>来来来，开始写程序</p>
<ol>
<li>首先开启一个后台服务 <code>NetCheckService</code>，1分钟执行一次。记得 AndroidMenifest.xml 注册。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by hanks on 16/6/21.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetCheckService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LAST_STATUS = <span class="string">"lastStatus"</span>; </div><div class="line">    <span class="meta">@Nullable</span> <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 服务开启</span></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        handleIntent();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleIntent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123; </div><div class="line">                    System.out.println(<span class="string">"onStart"</span>);</div><div class="line">                    </div><div class="line">                    <span class="comment">// 判断是否来电了</span></div><div class="line">                    handleStatus();</div><div class="line"></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">60</span>*<span class="number">1000</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    System.out.println(<span class="string">"----耗时任务执行完成---"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ol>
<li>检测网络</li>
</ol>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 检测当的网络状态</div><div class="line"> * <span class="doctag">@return</span> true 表示网络可用</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isNetworkAvailable</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    ConnectivityManager connectivity = (ConnectivityManager) context</div><div class="line">            .getSystemService(Context.CONNECTIVITY_SERVICE);</div><div class="line">    <span class="keyword">if</span> (connectivity != <span class="keyword">null</span>) &#123;</div><div class="line">        NetworkInfo info = connectivity.getActiveNetworkInfo();</div><div class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span> &amp;&amp; info.isConnected()) &#123;</div><div class="line">            <span class="comment">// 当前网络是连接的</span></div><div class="line">            <span class="keyword">if</span> (info.getState() == NetworkInfo.State.CONNECTED) &#123;</div><div class="line">                <span class="comment">// 当前所连接的网络可用</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>判断是否来电了, <strong>记得注册相应的权限</strong>。</li>
</ol>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">boolean</span> <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</div><div class="line">    SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());</div><div class="line">    <span class="function"><span class="keyword">return</span> sp.<span class="title">getBoolean</span><span class="params">(LAST_STATUS, <span class="keyword">false</span>)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">updateStatus</span><span class="params">(<span class="keyword">boolean</span> isAvailable)</span> </span>&#123;</div><div class="line">    SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());</div><div class="line">    SharedPreferences.Editor editor = sp.edit();</div><div class="line">    editor.putBoolean(LAST_STATUS, isAvailable);</div><div class="line">    editor.apply();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">hanldeStatus</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> lastStatus = getStatus();</div><div class="line">    <span class="comment">// 检测网络状况</span></div><div class="line">    <span class="keyword">boolean</span> isNetworkAvailable = isNetworkAvailable(getApplicationContext());</div><div class="line">    <span class="comment">// 如果原来网络不可用 &amp;&amp; 现在可用了</span></div><div class="line">    <span class="keyword">if</span> (!lastStatus &amp;&amp; isNetworkAvailable) &#123;</div><div class="line">        <span class="comment">// 发送短信</span></div><div class="line">        sendSMS();</div><div class="line">    &#125;</div><div class="line">    System.out.println(<span class="string">"isNetworkAvailable = "</span> + isNetworkAvailable);</div><div class="line">    <span class="comment">// 更新网络状态</span></div><div class="line">    updateStatus(isNetworkAvailable);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>定期检测手机连接网络的状态，如果当前网络是可用状态并且上次是不可用状态，那么就说明来电了，然后就发送短信通知我<br>发送短信就使用的 ShareSDK 的。自定义短信模板还要审核，所以暂时用系统默认的。</li>
</ol>
<p><img src="http://ww2.sinaimg.cn/large/8c9b876fjw1f53acno7raj20k00zkjss.jpg" alt="收到短信" style="width: 400px;"></p>
<p>还不完善的地方：</p>
<ul>
<li>手机服务很有可能被杀死。</li>
<li>短信模板。</li>
</ul>
<blockquote>
<p>还有一种思路就是手机一直充着电，检测手机电池状态是否为充电。</p>
<p>文章来自： <a href="http://hanks.pub">http://hanks.pub</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近住的地方总在晚上停电，还让不让人活了，大热天的，于是就晚上在外面先找个凉快的地方呆着，但是来电的时间不确定，有时候感觉应该来电了，回去了还是没电，那个热啊。那么问题来了，要是屋里来电了有人告诉我就好了！于是计划写一个小程序让它在屋里来电后通知。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://hanks.pub/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>SwipeRefreshLayout 源码</title>
    <link href="http://hanks.pub/2016/06/18/swiperefreshlayout/"/>
    <id>http://hanks.pub/2016/06/18/swiperefreshlayout/</id>
    <published>2016-06-18T11:37:51.000Z</published>
    <updated>2017-07-10T11:02:58.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="http://developer.android.com/intl/zh-cn/reference/android/support/v4/widget/SwipeRefreshLayout.html" target="_blank" rel="external">官方文档</a></p>
<p><code>SwipeRefreshLayout</code> 是一个下拉刷新控件，几乎可以包裹一个任何可以滚动的内容（ListView GridView ScrollView RecyclerView），可以自动识别垂直滚动手势。使用起来非常方便。</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="http://img.blog.csdn.net/20150127120706062" alt=""></td>
<td style="text-align:center"><img src="http://img.blog.csdn.net/20150127121649015" alt=""></td>
</tr>
</tbody>
</table>
<p> 1.将需要下拉刷新的空间包裹起来</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.SwipeRefreshLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/recyclerView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.SwipeRefreshLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 2.设置刷新动画的触发回调</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置下拉出现小圆圈是否是缩放出现，出现的位置，最大的下拉位置</span></div><div class="line">mySwipeRefreshLayout.setProgressViewOffset(<span class="keyword">true</span>, <span class="number">50</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line"><span class="comment">//设置下拉圆圈的大小，两个值 LARGE， DEFAULT</span></div><div class="line">mySwipeRefreshLayout.setSize(SwipeRefreshLayout.LARGE);</div><div class="line"></div><div class="line"><span class="comment">// 设置下拉圆圈上的颜色，蓝色、绿色、橙色、红色</span></div><div class="line">mySwipeRefreshLayout.setColorSchemeResources(</div><div class="line">    android.R.color.holo_blue_bright,</div><div class="line">    android.R.color.holo_green_light,</div><div class="line">    android.R.color.holo_orange_light,</div><div class="line">    android.R.color.holo_red_light);</div><div class="line"></div><div class="line"><span class="comment">// 通过 setEnabled(false) 禁用下拉刷新</span></div><div class="line">mySwipeRefreshLayout.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line"><span class="comment">// 设定下拉圆圈的背景</span></div><div class="line">mSwipeLayout.setProgressBackgroundColor(R.color.red);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 设置手势下拉刷新的监听</div><div class="line"> */</div><div class="line">mySwipeRefreshLayout.setOnRefreshListener(</div><div class="line">    <span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 刷新动画开始后回调到此方法</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>通过 <code>setRefreshing(false)</code> 和 <code>setRefreshing(true)</code> 来手动调用刷新的动画。</p>
<blockquote>
<p><code>onRefresh</code> 的回调只有在手势下拉的情况下才会触发，通过 <code>setRefreshing</code> 只能调用刷新的动画是否显示。<br>SwipeRefreshLayout 也可放在 CoordinatorLayout 内共同处理滑动冲突，有兴趣可以尝试。</p>
</blockquote>
<h2 id="SwipeRefreshLayout-源码分析"><a href="#SwipeRefreshLayout-源码分析" class="headerlink" title="SwipeRefreshLayout 源码分析"></a>SwipeRefreshLayout 源码分析</h2><blockquote>
<p>本文基于 v4 版本 <code>23.2.0</code></p>
</blockquote>
<p>extends <code>ViewGroup</code> implements <code>NestedScrollingParent</code> <code>NestedScrollingChild</code><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">java<span class="selector-class">.lang</span><span class="selector-class">.Object</span></div><div class="line">   ↳    android<span class="selector-class">.view</span><span class="selector-class">.View</span></div><div class="line">       ↳    android<span class="selector-class">.view</span><span class="selector-class">.ViewGroup</span></div><div class="line">           ↳    android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.widget</span><span class="selector-class">.SwipeRefreshLayout</span></div></pre></td></tr></table></figure></p>
<p>SwipeRefreshLayout 的分析分为两个部分：<strong>自定义 ViewGroup 的部分</strong>，<strong>处理和子视图的嵌套滚动部分</strong>。</p>
<h3 id="SwipeRefreshLayout-extends-ViewGroup"><a href="#SwipeRefreshLayout-extends-ViewGroup" class="headerlink" title="SwipeRefreshLayout extends ViewGroup"></a>SwipeRefreshLayout extends ViewGroup</h3><p>其实就是一个自定义的 ViewGroup ，结合我们自己平时自定义 ViewGroup 的步骤：</p>
<ol>
<li>初始化变量</li>
<li>onMeasure</li>
<li>onLayout</li>
<li>处理交互 （<code>dispatchTouchEvent</code> <code>onInterceptTouchEvent</code> <code>onTouchEvent</code>）</li>
</ol>
<p>接下来就按照上面的步骤进行分析。</p>
<h4 id="1-初始化变量"><a href="#1-初始化变量" class="headerlink" title="1.初始化变量"></a>1.初始化变量</h4><p><code>SwipeRefreshLayout</code> 内部有 2 个 View，一个<code>圆圈（mCircleView）</code>，一个内部可滚动的<code>View（mTarget）</code>。除了 View，还包含一个 <code>OnRefreshListener</code> 接口，当刷新动画被触发时回调。</p>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/8e02212d-b364-4df8-bfaa-47f3084f89e7.png" alt="图片"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Constructor that is called when inflating SwipeRefreshLayout from XML.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> context</div><div class="line"> * <span class="doctag">@param</span> attrs</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SwipeRefreshLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs);</div><div class="line"></div><div class="line">    <span class="comment">// 系统默认的最小滚动距离</span></div><div class="line">    mTouchSlop = ViewConfiguration.get(context).getScaledTouchSlop();</div><div class="line"></div><div class="line">    <span class="comment">// 系统默认的动画时长</span></div><div class="line">    mMediumAnimationDuration = getResources().getInteger(</div><div class="line">            android.R.integer.config_mediumAnimTime);</div><div class="line"></div><div class="line">    setWillNotDraw(<span class="keyword">false</span>);</div><div class="line">    mDecelerateInterpolator = <span class="keyword">new</span> DecelerateInterpolator(DECELERATE_INTERPOLATION_FACTOR);</div><div class="line"></div><div class="line">    <span class="comment">// 获取 xml 中定义的属性</span></div><div class="line">    <span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(attrs, LAYOUT_ATTRS);</div><div class="line">    setEnabled(a.getBoolean(<span class="number">0</span>, <span class="keyword">true</span>));</div><div class="line">    a.recycle();</div><div class="line"></div><div class="line">    <span class="comment">// 刷新的圆圈的大小，单位转换成 sp</span></div><div class="line">    <span class="keyword">final</span> DisplayMetrics metrics = getResources().getDisplayMetrics();</div><div class="line">    mCircleWidth = (<span class="keyword">int</span>) (CIRCLE_DIAMETER * metrics.density);</div><div class="line">    mCircleHeight = (<span class="keyword">int</span>) (CIRCLE_DIAMETER * metrics.density);</div><div class="line"></div><div class="line">    <span class="comment">// 创建刷新动画的圆圈</span></div><div class="line">    createProgressView();</div><div class="line"></div><div class="line">    ViewCompat.setChildrenDrawingOrderEnabled(<span class="keyword">this</span>, <span class="keyword">true</span>);</div><div class="line">    <span class="comment">// the absolute offset has to take into account that the circle starts at an offset</span></div><div class="line">    mSpinnerFinalOffset = DEFAULT_CIRCLE_TARGET * metrics.density;</div><div class="line">    <span class="comment">// 刷新动画的临界距离值</span></div><div class="line">    mTotalDragDistance = mSpinnerFinalOffset;</div><div class="line"></div><div class="line">    <span class="comment">// 通过 NestedScrolling 机制来处理嵌套滚动</span></div><div class="line">    mNestedScrollingParentHelper = <span class="keyword">new</span> NestedScrollingParentHelper(<span class="keyword">this</span>);</div><div class="line">    mNestedScrollingChildHelper = <span class="keyword">new</span> NestedScrollingChildHelper(<span class="keyword">this</span>);</div><div class="line">    setNestedScrollingEnabled(<span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>// 创建刷新动画的圆圈<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createProgressView</span><span class="params">()</span> </span>&#123;</div><div class="line">    mCircleView = <span class="keyword">new</span> CircleImageView(getContext(), CIRCLE_BG_LIGHT, CIRCLE_DIAMETER/<span class="number">2</span>);</div><div class="line">    mProgress = <span class="keyword">new</span> MaterialProgressDrawable(getContext(), <span class="keyword">this</span>);</div><div class="line">    mProgress.setBackgroundColor(CIRCLE_BG_LIGHT);</div><div class="line">    mCircleView.setImageDrawable(mProgress);</div><div class="line">    mCircleView.setVisibility(View.GONE);</div><div class="line">    addView(mCircleView);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>初始化的时候创建一个出来一个 View （下拉刷新的圆圈）。可以看出使用背景圆圈是 v4 包里提供的 <code>CircleImageView</code> 控件，中间的是 <code>MaterialProgressDrawable</code> 进度条。<br>另一个 View 是在 xml 中包含的可滚动视图。</p>
<h4 id="2-onMeasure"><a href="#2-onMeasure" class="headerlink" title="2.onMeasure"></a>2.onMeasure</h4><p>onMeasure 确定子视图的大小。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    <span class="keyword">if</span> (mTarget == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 确定内部要滚动的View，如 RecycleView</span></div><div class="line">        ensureTarget();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (mTarget == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测量子 View （mTarget）</span></div><div class="line">    mTarget.measure(MeasureSpec.makeMeasureSpec(</div><div class="line">            getMeasuredWidth() - getPaddingLeft() - getPaddingRight(),</div><div class="line">            MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(</div><div class="line">            getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), MeasureSpec.EXACTLY));</div><div class="line"></div><div class="line">    <span class="comment">// 测量刷新的圆圈 mCircleView</span></div><div class="line">    mCircleView.measure(MeasureSpec.makeMeasureSpec(mCircleWidth, MeasureSpec.EXACTLY),</div><div class="line">            MeasureSpec.makeMeasureSpec(mCircleHeight, MeasureSpec.EXACTLY));</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!mUsingCustomStart &amp;&amp; !mOriginalOffsetCalculated) &#123;</div><div class="line">        mOriginalOffsetCalculated = <span class="keyword">true</span>;</div><div class="line">        mCurrentTargetOffsetTop = mOriginalOffsetTop = -mCircleView.getMeasuredHeight();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 计算 mCircleView 在 ViewGroup 中的索引</span></div><div class="line">    mCircleViewIndex = -<span class="number">1</span>;</div><div class="line">    <span class="comment">// Get the index of the circleview.</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; getChildCount(); index++) &#123;</div><div class="line">        <span class="keyword">if</span> (getChildAt(index) == mCircleView) &#123;</div><div class="line">            mCircleViewIndex = index;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个步骤确定了 mCircleView 和 SwipeRefreshLayout 的子视图的大小。</p>
<h4 id="3-onLayout"><a href="#3-onLayout" class="headerlink" title="3.onLayout"></a>3.onLayout</h4><p>onLayout 主要负责确定各个子视图的位置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">   <span class="comment">// 获取 SwipeRefreshLayout 的宽高</span></div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> width = getMeasuredWidth();</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> height = getMeasuredHeight();</div><div class="line">   <span class="keyword">if</span> (getChildCount() == <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (mTarget == <span class="keyword">null</span>) &#123;</div><div class="line">       ensureTarget();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (mTarget == <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 考虑到给控件设置 padding，去除 padding 的距离</span></div><div class="line">   <span class="keyword">final</span> View child = mTarget;</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> childLeft = getPaddingLeft();</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> childTop = getPaddingTop();</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> childWidth = width - getPaddingLeft() - getPaddingRight();</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> childHeight = height - getPaddingTop() - getPaddingBottom();</div><div class="line">   <span class="comment">// 设置 mTarget 的位置</span></div><div class="line">   child.layout(childLeft, childTop, childLeft + childWidth, childTop + childHeight);</div><div class="line">   <span class="keyword">int</span> circleWidth = mCircleView.getMeasuredWidth();</div><div class="line">   <span class="keyword">int</span> circleHeight = mCircleView.getMeasuredHeight();</div><div class="line">   <span class="comment">// 根据 mCurrentTargetOffsetTop 变量的值来设置 mCircleView 的位置</span></div><div class="line">   mCircleView.layout((width / <span class="number">2</span> - circleWidth / <span class="number">2</span>), mCurrentTargetOffsetTop,</div><div class="line">           (width / <span class="number">2</span> + circleWidth / <span class="number">2</span>), mCurrentTargetOffsetTop + circleHeight);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <img src="https://dn-coding-net-production-pp.qbox.me/8df6d458-700b-4ec5-b731-c6b8c34cdddc.png" alt="图片"></p>
<p>在 onLayout 中放置了 mCircleView 的位置，注意 顶部位置是 mCurrentTargetOffsetTop ，mCurrentTargetOffsetTop 初始距离是<code>-mCircleView.getMeasuredHeight()</code>，所以是在 SwipeRefreshLayout 外。</p>
<blockquote>
<p>经过以上几个步骤，SwipeRefreshLayout 创建了子视图，确定他们的大小、位置，现在所有视图可以显示在界面了。</p>
</blockquote>
<h3 id="处理与子视图的滚动交互"><a href="#处理与子视图的滚动交互" class="headerlink" title="处理与子视图的滚动交互"></a>处理与子视图的滚动交互</h3><p>下拉刷新控件的主要功能是当子视图下拉到最顶部时，继续下拉可以出现刷新动画。而子视图可以滚动时需要将所有滚动事件都交给子视图。借助 Android 提供的 NestedScrolling 机制，使得 SwipeRefreshLayout 很轻松的解决了与子视图的滚动冲突问题。<br>SwipeRefreshLayout 通过实现 <code>NestedScrollingParent</code> 和 <code>NestedScrollingChild</code> 接口来处理滚动冲突。SwipeRefreshLayout 作为 Parent 嵌套一个可以滚动的子视图，那么就需要了解一下 NestedScrollingParent 接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 当你希望自己的自定义布局支持嵌套子视图并且处理滚动操作，就可以实现该接口。</div><div class="line"> 实现这个接口后可以创建一个 NestedScrollingParentHelper 字段，使用它来帮助你处理大部分的方法。</div><div class="line"> 处理嵌套的滚动时应该使用  `ViewCompat`，`ViewGroupCompat`或`ViewParentCompat` 中的方法来处理，这是一些兼容库，</div><div class="line"> 他们保证 Android 5.0之前的兼容性垫片的静态方法，这样可以兼容 Android 5.0 之前的版本。</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NestedScrollingParent</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当子视图调用 startNestedScroll(View, int) 后调用该方法。返回 true 表示响应子视图的滚动。</div><div class="line">     * 实现这个方法来声明支持嵌套滚动，如果返回 true，那么这个视图将要配合子视图嵌套滚动。当嵌套滚动结束时会调用到 onStopNestedScroll(View)。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> child 可滚动的子视图</div><div class="line">     * <span class="doctag">@param</span> target NestedScrollingParent 的直接可滚动的视图，一般情况就是 child</div><div class="line">     * <span class="doctag">@param</span> nestedScrollAxes 包含 ViewCompat#SCROLL_AXIS_HORIZONTAL, ViewCompat#SCROLL_AXIS_VERTICAL 或者两个值都有。</div><div class="line">     * <span class="doctag">@return</span> 返回 true 表示响应子视图的滚动。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(View child, View target, <span class="keyword">int</span> nestedScrollAxes)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 如果 onStartNestedScroll 返回 true ，然后走该方法，这个方法里可以做一些初始化。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScrollAccepted</span><span class="params">(View child, View target, <span class="keyword">int</span> nestedScrollAxes)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 子视图开始滚动前会调用这个方法。这时候父布局（也就是当前的 NestedScrollingParent 的实现类）可以通过这个方法来配合子视图同时处理滚动事件。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> target 滚动的子视图</div><div class="line">     * <span class="doctag">@param</span> dx 绝对值为手指在x方向滚动的距离，dx&lt;0 表示手指在屏幕向右滚动</div><div class="line">     * <span class="doctag">@param</span> dy 绝对值为手指在y方向滚动的距离，dy&lt;0 表示手指在屏幕向下滚动</div><div class="line">     * <span class="doctag">@param</span> consumed 一个数组，值用来表示父布局消耗了多少距离，未消耗前为[0,0], 如果父布局想处理滚动事件，就可以在这个方法的实现中为consumed[0]，consumed[1]赋值。</div><div class="line">     *                 分别表示x和y方向消耗的距离。如父布局想在竖直方向（y）完全拦截子视图，那么让 consumed[1] = dy，就把手指产生的触摸事件给拦截了，子视图便响应不到触摸事件了 。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedPreScroll</span><span class="params">(View target, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span>[] consumed)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">     * 这个方法表示子视图正在滚动，并且把滚动距离回调用到该方法，前提是 onStartNestedScroll 返回了 true。</div><div class="line">     * &lt;p&gt;Both the consumed and unconsumed portions of the scroll distance are reported to the</div><div class="line">     * ViewParent. An implementation may choose to use the consumed portion to match or chase scroll</div><div class="line">     * position of multiple child elements, for example. The unconsumed portion may be used to</div><div class="line">     * allow continuous dragging of multiple scrolling or draggable elements, such as scrolling</div><div class="line">     * a list within a vertical drawer where the drawer begins dragging once the edge of inner</div><div class="line">     * scrolling content is reached.&lt;/p&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> target 滚动的子视图</div><div class="line">     * <span class="doctag">@param</span> dxConsumed 手指产生的触摸距离中，子视图消耗的x方向的距离</div><div class="line">     * <span class="doctag">@param</span> dyConsumed 手指产生的触摸距离中，子视图消耗的y方向的距离 ，如果 onNestedPreScroll 中 dy = 20， consumed[0] = 8，那么 dy = 12</div><div class="line">      * <span class="doctag">@param</span> dxUnconsumed 手指产生的触摸距离中，未被子视图消耗的x方向的距离</div><div class="line">     * <span class="doctag">@param</span> dyUnconsumed 手指产生的触摸距离中，未被子视图消耗的y方向的距离</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(View target, <span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed,<span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 响应嵌套滚动结束</div><div class="line">     *</div><div class="line">     * 当一个嵌套滚动结束后（如MotionEvent#ACTION_UP， MotionEvent#ACTION_CANCEL）会调用该方法，在这里可有做一些收尾工作，比如变量重置</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopNestedScroll</span><span class="params">(View target)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 手指在屏幕快速滑触发Fling前回调，如果前面 onNestedPreScroll 中父布局消耗了事件，那么这个也会被触发</div><div class="line">     * 返回true表示父布局完全处理 fling 事件</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> target 滚动的子视图</div><div class="line">     * <span class="doctag">@param</span> velocityX x方向的速度（px/s）</div><div class="line">     * <span class="doctag">@param</span> velocityY y方向的速度</div><div class="line">     * <span class="doctag">@return</span> true if this parent consumed the fling ahead of the target view</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNestedPreFling</span><span class="params">(View target, <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 子视图fling 时回调，父布局可以选择监听子视图的 fling。</div><div class="line">     * true 表示父布局处理 fling，false表示父布局监听子视图的fling</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> target View that initiated the nested scroll</div><div class="line">     * <span class="doctag">@param</span> velocityX Horizontal velocity in pixels per second</div><div class="line">     * <span class="doctag">@param</span> velocityY Vertical velocity in pixels per second</div><div class="line">     * <span class="doctag">@param</span> consumed true 表示子视图处理了fling</div><div class="line"></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNestedFling</span><span class="params">(View target, <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY, <span class="keyword">boolean</span> consumed)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回当前 NestedScrollingParent 的滚动方向，</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@see</span> ViewCompat#SCROLL_AXIS_HORIZONTAL</div><div class="line">     * <span class="doctag">@see</span> ViewCompat#SCROLL_AXIS_VERTICAL</div><div class="line">     * <span class="doctag">@see</span> ViewCompat#SCROLL_AXIS_NONE</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNestedScrollAxes</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看一下 SwipeRefreshLayout 实现 NestedScrollingParent 的相关方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// NestedScrollingParent</span></div><div class="line"></div><div class="line"><span class="comment">// 子 View （NestedScrollingChild）开始滚动前回调此方法,返回 true 表示接 Parent 收嵌套滚动，然后调用 onNestedScrollAccepted</span></div><div class="line"><span class="comment">// 具体可以看 NestedScrollingChildHelper 的源码</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(View child, View target, <span class="keyword">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class="line">    <span class="comment">// 子 View 回调，判断是否开始嵌套滚动 ，</span></div><div class="line">    <span class="keyword">return</span> isEnabled() &amp;&amp; !mReturningToStart &amp;&amp; !mRefreshing</div><div class="line">            &amp;&amp; (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScrollAccepted</span><span class="params">(View child, View target, <span class="keyword">int</span> axes)</span> </span>&#123;</div><div class="line">     <span class="comment">// Reset the counter of how much leftover scroll needs to be consumed.</span></div><div class="line">     mNestedScrollingParentHelper.onNestedScrollAccepted(child, target, axes);</div><div class="line"></div><div class="line">     <span class="comment">// ...省略代码</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>SwipeRefreshLayout 只接受竖直方向（Y轴）的滚动，并且在刷新动画进行中不接受滚动。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// NestedScrollingChild 在滚动的时候会触发， 看父类消耗了多少距离</span></div><div class="line"><span class="comment">//   * @param dx x 轴滚动的距离</span></div><div class="line"><span class="comment">//   * @param dy y 轴滚动的距离</span></div><div class="line"><span class="comment">//   * @param consumed 代表 父 View 消费的滚动距离</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedPreScroll</span><span class="params">(View target, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span>[] consumed)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// dy &gt; 0 表示手指在屏幕向上移动</span></div><div class="line">    <span class="comment">//  mTotalUnconsumed 表示子视图Y轴未消费的距离</span></div><div class="line">    <span class="comment">// 现在表示</span></div><div class="line">    <span class="keyword">if</span> (dy &gt; <span class="number">0</span> &amp;&amp; mTotalUnconsumed &gt; <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (dy &gt; mTotalUnconsumed) &#123;</div><div class="line">            consumed[<span class="number">1</span>] = dy - (<span class="keyword">int</span>) mTotalUnconsumed; <span class="comment">// SwipeRefreshLayout 就吧子视图位消费的距离全部消费了。</span></div><div class="line">            mTotalUnconsumed = <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mTotalUnconsumed -= dy; <span class="comment">// 消费的 y 轴的距离</span></div><div class="line">            consumed[<span class="number">1</span>] = dy;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 出现动画圆圈，并向上移动</span></div><div class="line">        moveSpinner(mTotalUnconsumed);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... 省略代码</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// onStartNestedScroll 返回 true 才会调用此方法。此方法表示子View将滚动事件分发到父 View（SwipeRefreshLayout）</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(<span class="keyword">final</span> View target, <span class="keyword">final</span> <span class="keyword">int</span> dxConsumed, <span class="keyword">final</span> <span class="keyword">int</span> dyConsumed,</span></span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> dxUnconsumed, <span class="keyword">final</span> <span class="keyword">int</span> dyUnconsumed) &#123;</div><div class="line">    <span class="comment">// ... 省略代码</span></div><div class="line"></div><div class="line">    <span class="comment">// This is a bit of a hack. Nested scrolling works from the bottom up, and as we are</span></div><div class="line">    <span class="comment">// sometimes between two nested scrolling views, we need a way to be able to know when any</span></div><div class="line">    <span class="comment">// nested scrolling parent has stopped handling events. We do that by using the</span></div><div class="line">    <span class="comment">// 'offset in window 'functionality to see if we have been moved from the event.</span></div><div class="line">    <span class="comment">// This is a decent indication of whether we should take over the event stream or not.</span></div><div class="line">    <span class="comment">// 手指在屏幕上向下滚动，并且子视图不可以滚动</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> dy = dyUnconsumed + mParentOffsetInWindow[<span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> (dy &lt; <span class="number">0</span> &amp;&amp; !canChildScrollUp()) &#123;</div><div class="line">        mTotalUnconsumed += Math.abs(dy);</div><div class="line">        moveSpinner(mTotalUnconsumed);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SwipeRefreshLayout 通过 NestedScrollingParent 接口完成了处理子视图的滚动的冲突，中间省略了一些 SwipeRefreshLayout作为 child 的相关代码，这种情况是为了兼容将 SwipeRefreshLayout 作为子视图放在知识嵌套滚动的父布局的情况，这里不做深入讨论。但是下拉刷新需要判断手指在屏幕的状态来进行一个刷新的动画，所以我们还需要处理触摸事件，判断手指在屏幕中的状态。</p>
<p>首先是 onInterceptTouchEvent，返回 true 表示拦截触摸事件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    ensureTarget();</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> action = MotionEventCompat.getActionMasked(ev);</div><div class="line"></div><div class="line">    <span class="comment">// 手指按下时恢复状态</span></div><div class="line">    <span class="keyword">if</span> (mReturningToStart &amp;&amp; action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">        mReturningToStart = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 控件可用 || 刷新事件刚结束正在恢复初始状态时 || 子 View 可滚动 || 正在刷新 || 父 View 正在滚动</span></div><div class="line">    <span class="keyword">if</span> (!isEnabled() || mReturningToStart || canChildScrollUp()</div><div class="line">            || mRefreshing || mNestedScrollInProgress) &#123;</div><div class="line">        <span class="comment">// Fail fast if we're not in a state where a swipe is possible</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (action) &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">            setTargetOffsetTopAndBottom(mOriginalOffsetTop - mCircleView.getTop(), <span class="keyword">true</span>);</div><div class="line">            mActivePointerId = MotionEventCompat.getPointerId(ev, <span class="number">0</span>);</div><div class="line">            mIsBeingDragged = <span class="keyword">false</span>;</div><div class="line">            <span class="comment">// 记录手指按下的位置，为了判断是否开始滚动</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> initialDownY = getMotionEventY(ev, mActivePointerId);</div><div class="line">            <span class="keyword">if</span> (initialDownY == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            mInitialDownY = initialDownY;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">            <span class="keyword">if</span> (mActivePointerId == INVALID_POINTER) &#123;</div><div class="line">                Log.e(LOG_TAG, <span class="string">"Got ACTION_MOVE event but don't have an active pointer id."</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> y = getMotionEventY(ev, mActivePointerId);</div><div class="line">            <span class="keyword">if</span> (y == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 判断当拖动距离大于最小距离时设置 mIsBeingDragged = true;</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> yDiff = y - mInitialDownY;</div><div class="line">            <span class="keyword">if</span> (yDiff &gt; mTouchSlop &amp;&amp; !mIsBeingDragged) &#123;</div><div class="line">                mInitialMotionY = mInitialDownY + mTouchSlop;</div><div class="line">                mIsBeingDragged = <span class="keyword">true</span>;</div><div class="line">                <span class="comment">// 正在拖动状态，更新圆圈的 progressbar 的 alpha 值</span></div><div class="line">                mProgress.setAlpha(STARTING_PROGRESS_ALPHA);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> MotionEventCompat.ACTION_POINTER_UP:</div><div class="line">            onSecondaryPointerUp(ev);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">            mIsBeingDragged = <span class="keyword">false</span>;</div><div class="line">            mActivePointerId = INVALID_POINTER;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> mIsBeingDragged;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到源码也就是进行简单处理，DOWN 的时候记录一下位置，MOVE 时判断移动的距离，返回值 mIsBeingDragged 为 true 时， 即 onInterceptTouchEvent 返回true，SwipeRefreshLayout 拦截触摸事件，不分发给 mTarget，然后把 MotionEvent 传给 onTouchEvent 方法。其中有一个判断子View的是否还可以滚动的方法 <code>canChildScrollUp</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@return</span> Whether it is possible for the child view of this layout to</div><div class="line"> *         scroll up. Override this if the child view is a custom view.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canChildScrollUp</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &lt; <span class="number">14</span>) &#123;</div><div class="line">        <span class="comment">// 判断 AbsListView 的子类 ListView 或者 GridView 等</span></div><div class="line">        <span class="keyword">if</span> (mTarget <span class="keyword">instanceof</span> AbsListView) &#123;</div><div class="line">            <span class="keyword">final</span> AbsListView absListView = (AbsListView) mTarget;</div><div class="line">            <span class="keyword">return</span> absListView.getChildCount() &gt; <span class="number">0</span></div><div class="line">                    &amp;&amp; (absListView.getFirstVisiblePosition() &gt; <span class="number">0</span> || absListView.getChildAt(<span class="number">0</span>)</div><div class="line">                            .getTop() &lt; absListView.getPaddingTop());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> ViewCompat.canScrollVertically(mTarget, -<span class="number">1</span>) || mTarget.getScrollY() &gt; <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> ViewCompat.canScrollVertically(mTarget, -<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当SwipeRefreshLayout 拦截了触摸事件之后（ mIsBeingDragged 为 true ），将 MotionEvent 交给 onTouchEvent 处理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// ... 省略代码</span></div><div class="line">    <span class="keyword">switch</span> (action) &#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">            <span class="comment">// 获取第一个按下的手指</span></div><div class="line">            mActivePointerId = MotionEventCompat.getPointerId(ev, <span class="number">0</span>);</div><div class="line">            mIsBeingDragged = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class="line">            <span class="comment">// 处理多指触控</span></div><div class="line">            pointerIndex = MotionEventCompat.findPointerIndex(ev, mActivePointerId);</div><div class="line"></div><div class="line">            <span class="comment">// ... 省略代码</span></div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, pointerIndex);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> overscrollTop = (y - mInitialMotionY) * DRAG_RATE;</div><div class="line">            <span class="keyword">if</span> (mIsBeingDragged) &#123;</div><div class="line">                <span class="keyword">if</span> (overscrollTop &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">// 正在拖动状态，更新圆圈的位置</span></div><div class="line">                    moveSpinner(overscrollTop);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// ... 省略代码</span></div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</div><div class="line">            pointerIndex = MotionEventCompat.findPointerIndex(ev, mActivePointerId);</div><div class="line">            <span class="keyword">if</span> (pointerIndex &lt; <span class="number">0</span>) &#123;</div><div class="line">                Log.e(LOG_TAG, <span class="string">"Got ACTION_UP event but don't have an active pointer id."</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, pointerIndex);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> overscrollTop = (y - mInitialMotionY) * DRAG_RATE;</div><div class="line">            mIsBeingDragged = <span class="keyword">false</span>;</div><div class="line">            <span class="comment">// 手指松开，将圆圈移动到正确的位置</span></div><div class="line">            finishSpinner(overscrollTop);</div><div class="line">            mActivePointerId = INVALID_POINTER;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// ... 省略代码</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在手指滚动过程中通过判断 mIsBeingDragged 来移动刷新的圆圈（对应的是 moveSpinner ），手指松开将圆圈移动到正确位置（初始位置或者刷新动画的位置，对应的是 finishSpinner 方法）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 手指下拉过程中触发的圆圈的变化过程，透明度变化，渐渐出现箭头，大小的变化</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveSpinner</span><span class="params">(<span class="keyword">float</span> overscrollTop)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 设置为有箭头的 progress</span></div><div class="line">    mProgress.showArrow(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 进度转化成百分比</span></div><div class="line">    <span class="keyword">float</span> originalDragPercent = overscrollTop / mTotalDragDistance;</div><div class="line"></div><div class="line">    <span class="comment">// 避免百分比超过 100%</span></div><div class="line">    <span class="keyword">float</span> dragPercent = Math.min(<span class="number">1f</span>, Math.abs(originalDragPercent));</div><div class="line">    <span class="comment">// 调整拖动百分比，造成视差效果</span></div><div class="line">    <span class="keyword">float</span> adjustedPercent = (<span class="keyword">float</span>) Math.max(dragPercent - .<span class="number">4</span>, <span class="number">0</span>) * <span class="number">5</span> / <span class="number">3</span>;</div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="keyword">float</span> extraOS = Math.abs(overscrollTop) - mTotalDragDistance;</div><div class="line"></div><div class="line">    <span class="comment">// 这里mUsingCustomStart 为 true 代表用户自定义了起始出现的坐标</span></div><div class="line">    <span class="keyword">float</span> slingshotDist = mUsingCustomStart ? mSpinnerFinalOffset - mOriginalOffsetTop</div><div class="line">            : mSpinnerFinalOffset;</div><div class="line"></div><div class="line">    <span class="comment">// 弹性系数</span></div><div class="line">    <span class="keyword">float</span> tensionSlingshotPercent = Math.max(<span class="number">0</span>, Math.min(extraOS, slingshotDist * <span class="number">2</span>)</div><div class="line">            / slingshotDist);</div><div class="line">    <span class="keyword">float</span> tensionPercent = (<span class="keyword">float</span>) ((tensionSlingshotPercent / <span class="number">4</span>) - Math.pow(</div><div class="line">            (tensionSlingshotPercent / <span class="number">4</span>), <span class="number">2</span>)) * <span class="number">2f</span>;</div><div class="line">    <span class="keyword">float</span> extraMove = (slingshotDist) * tensionPercent * <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 因为有弹性系数，不同的手指滚动距离不同于view的移动距离</span></div><div class="line">    <span class="keyword">int</span> targetY = mOriginalOffsetTop + (<span class="keyword">int</span>) ((slingshotDist * dragPercent) + extraMove);</div><div class="line"></div><div class="line">    <span class="comment">// where 1.0f is a full circle</span></div><div class="line">    <span class="keyword">if</span> (mCircleView.getVisibility() != View.VISIBLE) &#123;</div><div class="line">        mCircleView.setVisibility(View.VISIBLE);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 设置的是否有缩放</span></div><div class="line">    <span class="keyword">if</span> (!mScale) &#123;</div><div class="line">        ViewCompat.setScaleX(mCircleView, <span class="number">1f</span>);</div><div class="line">        ViewCompat.setScaleY(mCircleView, <span class="number">1f</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 设置缩放进度</span></div><div class="line">    <span class="keyword">if</span> (mScale) &#123;</div><div class="line">        setAnimationProgress(Math.min(<span class="number">1f</span>, overscrollTop / mTotalDragDistance));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 移动距离未达到最大距离</span></div><div class="line">    <span class="keyword">if</span> (overscrollTop &lt; mTotalDragDistance) &#123;</div><div class="line">        <span class="keyword">if</span> (mProgress.getAlpha() &gt; STARTING_PROGRESS_ALPHA</div><div class="line">                &amp;&amp; !isAnimationRunning(mAlphaStartAnimation)) &#123;</div><div class="line">            <span class="comment">// Animate the alpha</span></div><div class="line">            startProgressAlphaStartAnimation();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (mProgress.getAlpha() &lt; MAX_ALPHA &amp;&amp; !isAnimationRunning(mAlphaMaxAnimation)) &#123;</div><div class="line">            <span class="comment">// Animate the alpha</span></div><div class="line">            startProgressAlphaMaxAnimation();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 出现的进度，裁剪 mProgress</span></div><div class="line">    <span class="keyword">float</span> strokeStart = adjustedPercent * .<span class="number">8f</span>;</div><div class="line">    mProgress.setStartEndTrim(<span class="number">0f</span>, Math.min(MAX_PROGRESS_ANGLE, strokeStart));</div><div class="line">    mProgress.setArrowScale(Math.min(<span class="number">1f</span>, adjustedPercent));</div><div class="line"></div><div class="line">    <span class="comment">// 旋转</span></div><div class="line">    <span class="keyword">float</span> rotation = (-<span class="number">0.25f</span> + .<span class="number">4f</span> * adjustedPercent + tensionPercent * <span class="number">2</span>) * .<span class="number">5f</span>;</div><div class="line">    mProgress.setProgressRotation(rotation);</div><div class="line">    setTargetOffsetTopAndBottom(targetY - mCurrentTargetOffsetTop, <span class="keyword">true</span> <span class="comment">/* requires update */</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>刷新圆圈的移动过程也是有好几种状态，看上面的注释基本上就比较清楚了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finishSpinner</span><span class="params">(<span class="keyword">float</span> overscrollTop)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (overscrollTop &gt; mTotalDragDistance) &#123;</div><div class="line">        <span class="comment">//移动距离超过了刷新的临界值，触发刷新动画</span></div><div class="line">        setRefreshing(<span class="keyword">true</span>, <span class="keyword">true</span> <span class="comment">/* notify */</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 取消刷新的圆圈，将圆圈移动到初始位置</span></div><div class="line">        mRefreshing = <span class="keyword">false</span>;</div><div class="line">        mProgress.setStartEndTrim(<span class="number">0f</span>, <span class="number">0f</span>);</div><div class="line">        <span class="comment">// ...省略代码</span></div><div class="line"></div><div class="line">        <span class="comment">// 移动到初始位置</span></div><div class="line">        animateOffsetToStartPosition(mCurrentTargetOffsetTop, listener);</div><div class="line">        <span class="comment">// 设置没有箭头</span></div><div class="line">        mProgress.showArrow(<span class="keyword">false</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到调用 setRefresh(true,true) 方法触发刷新动画并进行回调，但是这个方法是 private 的。前面提到我们自己调用 setRefresh(true) 只能产生动画，而不能回调刷新函数，那么我们就可以用反射调用 2 个参数的 setRefresh 函数。 或者手动调 setRefreshing(true)+ OnRefreshListener.onRefresh 方法。</p>
<h3 id="setRefresh"><a href="#setRefresh" class="headerlink" title="setRefresh"></a>setRefresh</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 改变刷新动画的的圆圈刷新状态。Notify the widget that refresh state has changed. Do not call this when</div><div class="line">  * refresh is triggered by a swipe gesture.</div><div class="line">  *</div><div class="line">  * <span class="doctag">@param</span> refreshing 是否显示刷新的圆圈</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRefreshing</span><span class="params">(<span class="keyword">boolean</span> refreshing)</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (refreshing &amp;&amp; mRefreshing != refreshing) &#123;</div><div class="line">         <span class="comment">// scale and show</span></div><div class="line">         mRefreshing = refreshing;</div><div class="line">         <span class="keyword">int</span> endTarget = <span class="number">0</span>;</div><div class="line">         <span class="keyword">if</span> (!mUsingCustomStart) &#123;</div><div class="line">             endTarget = (<span class="keyword">int</span>) (mSpinnerFinalOffset + mOriginalOffsetTop);</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             endTarget = (<span class="keyword">int</span>) mSpinnerFinalOffset;</div><div class="line">         &#125;</div><div class="line">         setTargetOffsetTopAndBottom(endTarget - mCurrentTargetOffsetTop,</div><div class="line">                 <span class="keyword">true</span> <span class="comment">/* requires update */</span>);</div><div class="line">         mNotify = <span class="keyword">false</span>;</div><div class="line">         startScaleUpAnimation(mRefreshListener);</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">         setRefreshing(refreshing, <span class="keyword">false</span> <span class="comment">/* notify */</span>);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>startScaleUpAnimation 开启一个动画，然后在动画结束后回调 onRefresh 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Animation.AnimationListener mRefreshListener = <span class="keyword">new</span> Animation.AnimationListener() &#123;</div><div class="line">   <span class="comment">// .. 省略代码</span></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animation animation)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (mRefreshing) &#123;</div><div class="line">           mProgress.setAlpha(MAX_ALPHA); <span class="comment">//确保刷新圆圈中间的进度条是完全不透明了</span></div><div class="line">           mProgress.start();</div><div class="line">           <span class="keyword">if</span> (mNotify) &#123; <span class="comment">// 当 mNotify 为 true 时才会回调 onRefresh</span></div><div class="line">               <span class="keyword">if</span> (mListener != <span class="keyword">null</span>) &#123;</div><div class="line">                   <span class="comment">// 回调 listener 的 onRefresh 方法</span></div><div class="line">                   mListener.onRefresh();</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           mCurrentTargetOffsetTop = mCircleView.getTop();</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           reset();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分析 SwipeRefreshLayout 的流程就是按照平时我们自定义 <code>ViewGroup</code> 的流程，但是其中也有好多需要我们借鉴的地方，如何使用 NestedScrolling相关机制 ，多点触控的处理，onMeasure 中减去了 padding，如何判断子 View 是否可滚动，如何确定 ViewGroup 中某一个 View 的索引等。<br>此外，一个好的下拉刷新框架不仅仅要兼容各种滚动的子控件，还要考虑自己要兼容 NestedScrollingChild 的情况，比如放到 CooCoordinatorLayout 的情况，目前大多数开源的下拉刷新好像都没有达到这个要求，一般都是只考虑了内部嵌套滚动子视图的情况，没有考虑自己作为滚动子视图的情况。</p>
<blockquote>
<p>文章来自： <a href="http://hanks.pub">http://hanks.pub</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://developer.android.com/intl/zh-cn/reference/android/support/v4/widget/SwipeRefreshLayout.html&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SwipeRefreshLayout&lt;/code&gt; 是一个下拉刷新控件，几乎可以包裹一个任何可以滚动的内容（ListView GridView ScrollView RecyclerView），可以自动识别垂直滚动手势。使用起来非常方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://hanks.pub/tags/Android/"/>
    
      <category term="SwipeRefreshLayout" scheme="http://hanks.pub/tags/SwipeRefreshLayout/"/>
    
  </entry>
  
</feed>
